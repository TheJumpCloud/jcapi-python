# coding: utf-8

"""
    JumpCloud Directory API

    JumpCloud RESTful APIs for the headless operation of core functions

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SystemUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email=None, firstname=None, lastname=None, username=None, password=None, allow_public_key=None, passwordless_sudo=None, sudo=None, public_key=None, unix_uid=None, unix_guid=None, tags=None, attributes=None):
        """
        SystemUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'email': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'username': 'str',
            'password': 'str',
            'allow_public_key': 'bool',
            'passwordless_sudo': 'bool',
            'sudo': 'bool',
            'public_key': 'str',
            'unix_uid': 'int',
            'unix_guid': 'int',
            'tags': 'list[str]',
            'attributes': 'list[SystemUserAttributes]'
        }

        self.attribute_map = {
            'id': '_id',
            'email': 'email',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'username': 'username',
            'password': 'password',
            'allow_public_key': 'allow_public_key',
            'passwordless_sudo': 'passwordless_sudo',
            'sudo': 'sudo',
            'public_key': 'public_key',
            'unix_uid': 'unix_uid',
            'unix_guid': 'unix_guid',
            'tags': 'tags',
            'attributes': 'attributes'
        }

        self._id = id
        self._email = email
        self._firstname = firstname
        self._lastname = lastname
        self._username = username
        self._password = password
        self._allow_public_key = allow_public_key
        self._passwordless_sudo = passwordless_sudo
        self._sudo = sudo
        self._public_key = public_key
        self._unix_uid = unix_uid
        self._unix_guid = unix_guid
        self._tags = tags
        self._attributes = attributes

    @property
    def id(self):
        """
        Gets the id of this SystemUser.
        ObjectId for the systemuser.

        :return: The id of this SystemUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SystemUser.
        ObjectId for the systemuser.

        :param id: The id of this SystemUser.
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """
        Gets the email of this SystemUser.
        The email address of the new System User.

        :return: The email of this SystemUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SystemUser.
        The email address of the new System User.

        :param email: The email of this SystemUser.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def firstname(self):
        """
        Gets the firstname of this SystemUser.

        :return: The firstname of this SystemUser.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this SystemUser.

        :param firstname: The firstname of this SystemUser.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this SystemUser.

        :return: The lastname of this SystemUser.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this SystemUser.

        :param lastname: The lastname of this SystemUser.
        :type: str
        """

        self._lastname = lastname

    @property
    def username(self):
        """
        Gets the username of this SystemUser.

        :return: The username of this SystemUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this SystemUser.

        :param username: The username of this SystemUser.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def password(self):
        """
        Gets the password of this SystemUser.

        :return: The password of this SystemUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this SystemUser.

        :param password: The password of this SystemUser.
        :type: str
        """

        self._password = password

    @property
    def allow_public_key(self):
        """
        Gets the allow_public_key of this SystemUser.
        Allow the system user to authenticate with a public key.

        :return: The allow_public_key of this SystemUser.
        :rtype: bool
        """
        return self._allow_public_key

    @allow_public_key.setter
    def allow_public_key(self, allow_public_key):
        """
        Sets the allow_public_key of this SystemUser.
        Allow the system user to authenticate with a public key.

        :param allow_public_key: The allow_public_key of this SystemUser.
        :type: bool
        """

        self._allow_public_key = allow_public_key

    @property
    def passwordless_sudo(self):
        """
        Gets the passwordless_sudo of this SystemUser.
        Allow the system user to execute as root without a password.

        :return: The passwordless_sudo of this SystemUser.
        :rtype: bool
        """
        return self._passwordless_sudo

    @passwordless_sudo.setter
    def passwordless_sudo(self, passwordless_sudo):
        """
        Sets the passwordless_sudo of this SystemUser.
        Allow the system user to execute as root without a password.

        :param passwordless_sudo: The passwordless_sudo of this SystemUser.
        :type: bool
        """

        self._passwordless_sudo = passwordless_sudo

    @property
    def sudo(self):
        """
        Gets the sudo of this SystemUser.
        Give the system user sudo access.

        :return: The sudo of this SystemUser.
        :rtype: bool
        """
        return self._sudo

    @sudo.setter
    def sudo(self, sudo):
        """
        Sets the sudo of this SystemUser.
        Give the system user sudo access.

        :param sudo: The sudo of this SystemUser.
        :type: bool
        """

        self._sudo = sudo

    @property
    def public_key(self):
        """
        Gets the public_key of this SystemUser.
        The SSH public key for the system user.

        :return: The public_key of this SystemUser.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """
        Sets the public_key of this SystemUser.
        The SSH public key for the system user.

        :param public_key: The public_key of this SystemUser.
        :type: str
        """

        self._public_key = public_key

    @property
    def unix_uid(self):
        """
        Gets the unix_uid of this SystemUser.
        The Unix user ID for the system user.

        :return: The unix_uid of this SystemUser.
        :rtype: int
        """
        return self._unix_uid

    @unix_uid.setter
    def unix_uid(self, unix_uid):
        """
        Sets the unix_uid of this SystemUser.
        The Unix user ID for the system user.

        :param unix_uid: The unix_uid of this SystemUser.
        :type: int
        """

        self._unix_uid = unix_uid

    @property
    def unix_guid(self):
        """
        Gets the unix_guid of this SystemUser.
        The Unix group ID for the system user.

        :return: The unix_guid of this SystemUser.
        :rtype: int
        """
        return self._unix_guid

    @unix_guid.setter
    def unix_guid(self, unix_guid):
        """
        Sets the unix_guid of this SystemUser.
        The Unix group ID for the system user.

        :param unix_guid: The unix_guid of this SystemUser.
        :type: int
        """

        self._unix_guid = unix_guid

    @property
    def tags(self):
        """
        Gets the tags of this SystemUser.
        An array of tag IDs or names to which the system user belongs. 

        :return: The tags of this SystemUser.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this SystemUser.
        An array of tag IDs or names to which the system user belongs. 

        :param tags: The tags of this SystemUser.
        :type: list[str]
        """

        self._tags = tags

    @property
    def attributes(self):
        """
        Gets the attributes of this SystemUser.
        An array of attributes associated with the system user.

        :return: The attributes of this SystemUser.
        :rtype: list[SystemUserAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this SystemUser.
        An array of attributes associated with the system user.

        :param attributes: The attributes of this SystemUser.
        :type: list[SystemUserAttributes]
        """

        self._attributes = attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SystemUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
