# coding: utf-8

"""
    JumpCloud Directory API

    JumpCloud RESTful APIs for the headless operation of core functions

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Systemuserbindings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, add=None, remove=None):
        """
        Systemuserbindings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'add': 'list[str]',
            'remove': 'list[str]'
        }

        self.attribute_map = {
            'add': 'add',
            'remove': 'remove'
        }

        self._add = add
        self._remove = remove

    @property
    def add(self):
        """
        Gets the add of this Systemuserbindings.

        :return: The add of this Systemuserbindings.
        :rtype: list[str]
        """
        return self._add

    @add.setter
    def add(self, add):
        """
        Sets the add of this Systemuserbindings.

        :param add: The add of this Systemuserbindings.
        :type: list[str]
        """
        if add is None:
            raise ValueError("Invalid value for `add`, must not be `None`")

        self._add = add

    @property
    def remove(self):
        """
        Gets the remove of this Systemuserbindings.

        :return: The remove of this Systemuserbindings.
        :rtype: list[str]
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """
        Sets the remove of this Systemuserbindings.

        :param remove: The remove of this Systemuserbindings.
        :type: list[str]
        """
        if remove is None:
            raise ValueError("Invalid value for `remove`, must not be `None`")

        self._remove = remove

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Systemuserbindings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
