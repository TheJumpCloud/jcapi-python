# coding: utf-8

"""
    JumpCloud Directory API

    JumpCloud RESTful APIs for the headless operation of core functions

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def command_trigger_webhook_post(self, x_api_key, webhook, **kwargs):
        """
        Launch the command assigned to the specified webhook.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.command_trigger_webhook_post(x_api_key, webhook, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str webhook: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.command_trigger_webhook_post_with_http_info(x_api_key, webhook, **kwargs)
        else:
            (data) = self.command_trigger_webhook_post_with_http_info(x_api_key, webhook, **kwargs)
            return data

    def command_trigger_webhook_post_with_http_info(self, x_api_key, webhook, **kwargs):
        """
        Launch the command assigned to the specified webhook.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.command_trigger_webhook_post_with_http_info(x_api_key, webhook, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str webhook: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'webhook']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_trigger_webhook_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `command_trigger_webhook_post`")
        # verify the required parameter 'webhook' is set
        if ('webhook' not in params) or (params['webhook'] is None):
            raise ValueError("Missing the required parameter `webhook` when calling `command_trigger_webhook_post`")


        collection_formats = {}

        resource_path = '/command/trigger/{webhook}'.replace('{format}', 'json')
        path_params = {}
        if 'webhook' in params:
            path_params['webhook'] = params['webhook']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commandresults_get(self, x_api_key, **kwargs):
        """
        Returns all command results for the org in multi-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commandresults_get(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commandresults_get_with_http_info(x_api_key, **kwargs)
        else:
            (data) = self.commandresults_get_with_http_info(x_api_key, **kwargs)
            return data

    def commandresults_get_with_http_info(self, x_api_key, **kwargs):
        """
        Returns all command results for the org in multi-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commandresults_get_with_http_info(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commandresults_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commandresults_get`")


        collection_formats = {}

        resource_path = '/commandresults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commandresults_id_delete(self, x_api_key, id, **kwargs):
        """
        Deletes the command result with the given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commandresults_id_delete(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commandresults_id_delete_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.commandresults_id_delete_with_http_info(x_api_key, id, **kwargs)
            return data

    def commandresults_id_delete_with_http_info(self, x_api_key, id, **kwargs):
        """
        Deletes the command result with the given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commandresults_id_delete_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commandresults_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commandresults_id_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `commandresults_id_delete`")


        collection_formats = {}

        resource_path = '/commandresults/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commandresults_id_get(self, x_api_key, id, **kwargs):
        """
        Get a command result from the ID in single-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commandresults_id_get(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: Commandresults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commandresults_id_get_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.commandresults_id_get_with_http_info(x_api_key, id, **kwargs)
            return data

    def commandresults_id_get_with_http_info(self, x_api_key, id, **kwargs):
        """
        Get a command result from the ID in single-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commandresults_id_get_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: Commandresults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commandresults_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commandresults_id_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `commandresults_id_get`")


        collection_formats = {}

        resource_path = '/commandresults/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Commandresults',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commands_get(self, x_api_key, **kwargs):
        """
        Get saved commands in multi-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_get(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commands_get_with_http_info(x_api_key, **kwargs)
        else:
            (data) = self.commands_get_with_http_info(x_api_key, **kwargs)
            return data

    def commands_get_with_http_info(self, x_api_key, **kwargs):
        """
        Get saved commands in multi-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_get_with_http_info(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commands_get`")


        collection_formats = {}

        resource_path = '/commands/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commands_id_delete(self, x_api_key, id, **kwargs):
        """
        Delete a saved command record by the command ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_id_delete(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commands_id_delete_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.commands_id_delete_with_http_info(x_api_key, id, **kwargs)
            return data

    def commands_id_delete_with_http_info(self, x_api_key, id, **kwargs):
        """
        Delete a saved command record by the command ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_id_delete_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commands_id_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `commands_id_delete`")


        collection_formats = {}

        resource_path = '/commands/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commands_id_get(self, x_api_key, id, **kwargs):
        """
        Gets a single command record using the command ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_id_get(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: Commands
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commands_id_get_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.commands_id_get_with_http_info(x_api_key, id, **kwargs)
            return data

    def commands_id_get_with_http_info(self, x_api_key, id, **kwargs):
        """
        Gets a single command record using the command ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_id_get_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: Commands
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commands_id_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `commands_id_get`")


        collection_formats = {}

        resource_path = '/commands/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Commands',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commands_id_put(self, x_api_key, id, body, **kwargs):
        """
        Updates a saved command record from the command ID and returns the modified command record in single-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_id_put(x_api_key, id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :param Commands body: (required)
        :return: Commands
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commands_id_put_with_http_info(x_api_key, id, body, **kwargs)
        else:
            (data) = self.commands_id_put_with_http_info(x_api_key, id, body, **kwargs)
            return data

    def commands_id_put_with_http_info(self, x_api_key, id, body, **kwargs):
        """
        Updates a saved command record from the command ID and returns the modified command record in single-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_id_put_with_http_info(x_api_key, id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :param Commands body: (required)
        :return: Commands
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commands_id_put`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `commands_id_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `commands_id_put`")


        collection_formats = {}

        resource_path = '/commands/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Commands',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def commands_post(self, x_api_key, body, **kwargs):
        """
        Add a new saved command record and return the newly created saved command in a single-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_post(x_api_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param Commands body: (required)
        :return: Commands
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commands_post_with_http_info(x_api_key, body, **kwargs)
        else:
            (data) = self.commands_post_with_http_info(x_api_key, body, **kwargs)
            return data

    def commands_post_with_http_info(self, x_api_key, body, **kwargs):
        """
        Add a new saved command record and return the newly created saved command in a single-record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commands_post_with_http_info(x_api_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param Commands body: (required)
        :return: Commands
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `commands_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `commands_post`")


        collection_formats = {}

        resource_path = '/commands/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Commands',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_systemusers_post(self, x_api_key, **kwargs):
        """
        Get System Users in multi-record format allowing for the passing of the 'filter' parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_systemusers_post(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param int limit: The number of records to return at once.
        :param int skip: The offset into the records to return.
        :param str sort: The comma separated fields used to sort the collection. Default sort is ascending, prefix with `-` to sort descending. 
        :param str fields: The comma separated fileds included in the returned records. If omitted the default list of fields will be returned. 
        :param str filter: 
        :param Search body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_systemusers_post_with_http_info(x_api_key, **kwargs)
        else:
            (data) = self.search_systemusers_post_with_http_info(x_api_key, **kwargs)
            return data

    def search_systemusers_post_with_http_info(self, x_api_key, **kwargs):
        """
        Get System Users in multi-record format allowing for the passing of the 'filter' parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_systemusers_post_with_http_info(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param int limit: The number of records to return at once.
        :param int skip: The offset into the records to return.
        :param str sort: The comma separated fields used to sort the collection. Default sort is ascending, prefix with `-` to sort descending. 
        :param str fields: The comma separated fileds included in the returned records. If omitted the default list of fields will be returned. 
        :param str filter: 
        :param Search body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'limit', 'skip', 'sort', 'fields', 'filter', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_systemusers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `search_systemusers_post`")


        collection_formats = {}

        resource_path = '/search/systemusers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'skip' in params:
            query_params['skip'] = params['skip']
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systems_system_id_systemusers_get(self, x_api_key, system_id, **kwargs):
        """
        List system user bindings for a specific system in a system and user binding format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systems_system_id_systemusers_get(x_api_key, system_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systems_system_id_systemusers_get_with_http_info(x_api_key, system_id, **kwargs)
        else:
            (data) = self.systems_system_id_systemusers_get_with_http_info(x_api_key, system_id, **kwargs)
            return data

    def systems_system_id_systemusers_get_with_http_info(self, x_api_key, system_id, **kwargs):
        """
        List system user bindings for a specific system in a system and user binding format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systems_system_id_systemusers_get_with_http_info(x_api_key, system_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'system_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systems_system_id_systemusers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systems_system_id_systemusers_get`")
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params) or (params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `systems_system_id_systemusers_get`")


        collection_formats = {}

        resource_path = '/systems/{systemID}/systemusers'.replace('{format}', 'json')
        path_params = {}
        if 'system_id' in params:
            path_params['systemID'] = params['system_id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systems_system_id_systemusers_put(self, x_api_key, system_id, body, **kwargs):
        """
        Adds or removes a user binding for a system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systems_system_id_systemusers_put(x_api_key, system_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_id: (required)
        :param Systemuserbindings body: Array of user ID's to be bound to the system. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systems_system_id_systemusers_put_with_http_info(x_api_key, system_id, body, **kwargs)
        else:
            (data) = self.systems_system_id_systemusers_put_with_http_info(x_api_key, system_id, body, **kwargs)
            return data

    def systems_system_id_systemusers_put_with_http_info(self, x_api_key, system_id, body, **kwargs):
        """
        Adds or removes a user binding for a system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systems_system_id_systemusers_put_with_http_info(x_api_key, system_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_id: (required)
        :param Systemuserbindings body: Array of user ID's to be bound to the system. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'system_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systems_system_id_systemusers_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systems_system_id_systemusers_put`")
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params) or (params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `systems_system_id_systemusers_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systems_system_id_systemusers_put`")


        collection_formats = {}

        resource_path = '/systems/{systemID}/systemusers'.replace('{format}', 'json')
        path_params = {}
        if 'system_id' in params:
            path_params['systemID'] = params['system_id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_get(self, x_api_key, **kwargs):
        """
        Get JumpCloud systemusers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_get(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param int limit: The number of records to return at once.
        :param int skip: The offset into the records to return.
        :param str sort: The comma separated fields used to sort the collection. Default sort is ascending, prefix with `-` to sort descending. 
        :param str fields: The comma separated fileds included in the returned records. If omitted the default list of fields will be returned. 
        :param str filter: 
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_get_with_http_info(x_api_key, **kwargs)
        else:
            (data) = self.systemusers_get_with_http_info(x_api_key, **kwargs)
            return data

    def systemusers_get_with_http_info(self, x_api_key, **kwargs):
        """
        Get JumpCloud systemusers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_get_with_http_info(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param int limit: The number of records to return at once.
        :param int skip: The offset into the records to return.
        :param str sort: The comma separated fields used to sort the collection. Default sort is ascending, prefix with `-` to sort descending. 
        :param str fields: The comma separated fileds included in the returned records. If omitted the default list of fields will be returned. 
        :param str filter: 
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'limit', 'skip', 'sort', 'fields', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_get`")


        collection_formats = {}

        resource_path = '/systemusers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'skip' in params:
            query_params['skip'] = params['skip']
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_id_delete(self, x_api_key, id, **kwargs):
        """
        Delete the system user with the given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_id_delete(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_id_delete_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.systemusers_id_delete_with_http_info(x_api_key, id, **kwargs)
            return data

    def systemusers_id_delete_with_http_info(self, x_api_key, id, **kwargs):
        """
        Delete the system user with the given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_id_delete_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_id_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `systemusers_id_delete`")


        collection_formats = {}

        resource_path = '/systemusers/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_id_get(self, x_api_key, id, **kwargs):
        """
        Get a System User record for User with the given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_id_get(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_id_get_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.systemusers_id_get_with_http_info(x_api_key, id, **kwargs)
            return data

    def systemusers_id_get_with_http_info(self, x_api_key, id, **kwargs):
        """
        Get a System User record for User with the given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_id_get_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_id_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `systemusers_id_get`")


        collection_formats = {}

        resource_path = '/systemusers/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_id_put(self, x_api_key, id, **kwargs):
        """
        Update a system user record and return the modified record in single record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_id_put(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :param Data data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_id_put_with_http_info(x_api_key, id, **kwargs)
        else:
            (data) = self.systemusers_id_put_with_http_info(x_api_key, id, **kwargs)
            return data

    def systemusers_id_put_with_http_info(self, x_api_key, id, **kwargs):
        """
        Update a system user record and return the modified record in single record format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_id_put_with_http_info(x_api_key, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str id: (required)
        :param Data data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_id_put`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `systemusers_id_put`")


        collection_formats = {}

        resource_path = '/systemusers/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_post(self, x_api_key, **kwargs):
        """
        Add new System Users and return the record.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_post(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param SystemUser data:
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_post_with_http_info(x_api_key, **kwargs)
        else:
            (data) = self.systemusers_post_with_http_info(x_api_key, **kwargs)
            return data

    def systemusers_post_with_http_info(self, x_api_key, **kwargs):
        """
        Add new System Users and return the record.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_post_with_http_info(x_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param SystemUser data:
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_post`")


        collection_formats = {}

        resource_path = '/systemusers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SystemUser',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_system_user_id_systems_get(self, x_api_key, system_user_id, **kwargs):
        """
        List system bindings for a specific system user in a system and user binding format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_system_user_id_systems_get(x_api_key, system_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_system_user_id_systems_get_with_http_info(x_api_key, system_user_id, **kwargs)
        else:
            (data) = self.systemusers_system_user_id_systems_get_with_http_info(x_api_key, system_user_id, **kwargs)
            return data

    def systemusers_system_user_id_systems_get_with_http_info(self, x_api_key, system_user_id, **kwargs):
        """
        List system bindings for a specific system user in a system and user binding format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_system_user_id_systems_get_with_http_info(x_api_key, system_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'system_user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_system_user_id_systems_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_system_user_id_systems_get`")
        # verify the required parameter 'system_user_id' is set
        if ('system_user_id' not in params) or (params['system_user_id'] is None):
            raise ValueError("Missing the required parameter `system_user_id` when calling `systemusers_system_user_id_systems_get`")


        collection_formats = {}

        resource_path = '/systemusers/{systemUserID}/systems'.replace('{format}', 'json')
        path_params = {}
        if 'system_user_id' in params:
            path_params['systemUserID'] = params['system_user_id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def systemusers_system_user_id_systems_put(self, x_api_key, system_user_id, body, **kwargs):
        """
        Adds or removes a system binding for a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_system_user_id_systems_put(x_api_key, system_user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_user_id: (required)
        :param Systemuserbindings body: Array of system ID's to be bound to the user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.systemusers_system_user_id_systems_put_with_http_info(x_api_key, system_user_id, body, **kwargs)
        else:
            (data) = self.systemusers_system_user_id_systems_put_with_http_info(x_api_key, system_user_id, body, **kwargs)
            return data

    def systemusers_system_user_id_systems_put_with_http_info(self, x_api_key, system_user_id, body, **kwargs):
        """
        Adds or removes a system binding for a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.systemusers_system_user_id_systems_put_with_http_info(x_api_key, system_user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_api_key: (required)
        :param str system_user_id: (required)
        :param Systemuserbindings body: Array of system ID's to be bound to the user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'system_user_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method systemusers_system_user_id_systems_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params) or (params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `systemusers_system_user_id_systems_put`")
        # verify the required parameter 'system_user_id' is set
        if ('system_user_id' not in params) or (params['system_user_id'] is None):
            raise ValueError("Missing the required parameter `system_user_id` when calling `systemusers_system_user_id_systems_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `systemusers_system_user_id_systems_put`")


        collection_formats = {}

        resource_path = '/systemusers/{systemUserID}/systems'.replace('{format}', 'json')
        path_params = {}
        if 'system_user_id' in params:
            path_params['systemUserID'] = params['system_user_id']

        query_params = {}

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
