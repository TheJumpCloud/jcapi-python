# coding: utf-8

"""
    JumpCloud APIs

    V1 & V2 versions of JumpCloud's API. The previous version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class System(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization': 'str',
        'created': 'str',
        'last_contact': 'str',
        'os': 'str',
        'version': 'str',
        'arch': 'str',
        'network_interfaces': 'list[SystemNetworkInterfaces]',
        'hostname': 'str',
        'display_name': 'str',
        'system_timezone': 'int',
        'template_name': 'str',
        'remote_ip': 'str',
        'active': 'bool',
        'sshd_params': 'list[str]',
        'allow_ssh_password_authentication': 'bool',
        'allow_ssh_root_login': 'bool',
        'allow_multi_factor_authentication': 'bool',
        'allow_public_key_authentication': 'bool',
        'modify_sshd_config': 'bool',
        'agent_version': 'str',
        'connection_history': 'list[object]',
        'ssh_root_enabled': 'bool',
        'id': 'str',
        'tags': 'list[str]',
        'id': 'str'
    }

    attribute_map = {
        'organization': 'organization',
        'created': 'created',
        'last_contact': 'lastContact',
        'os': 'os',
        'version': 'version',
        'arch': 'arch',
        'network_interfaces': 'networkInterfaces',
        'hostname': 'hostname',
        'display_name': 'displayName',
        'system_timezone': 'systemTimezone',
        'template_name': 'templateName',
        'remote_ip': 'remoteIP',
        'active': 'active',
        'sshd_params': 'sshdParams',
        'allow_ssh_password_authentication': 'allowSshPasswordAuthentication',
        'allow_ssh_root_login': 'allowSshRootLogin',
        'allow_multi_factor_authentication': 'allowMultiFactorAuthentication',
        'allow_public_key_authentication': 'allowPublicKeyAuthentication',
        'modify_sshd_config': 'modifySSHDConfig',
        'agent_version': 'agentVersion',
        'connection_history': 'connectionHistory',
        'ssh_root_enabled': 'sshRootEnabled',
        'id': 'id',
        'tags': 'tags',
        'id': '_id'
    }

    def __init__(self, organization=None, created=None, last_contact=None, os=None, version=None, arch=None, network_interfaces=None, hostname=None, display_name=None, system_timezone=None, template_name=None, remote_ip=None, active=None, sshd_params=None, allow_ssh_password_authentication=None, allow_ssh_root_login=None, allow_multi_factor_authentication=None, allow_public_key_authentication=None, modify_sshd_config=None, agent_version=None, connection_history=None, ssh_root_enabled=None, id=None, tags=None):
        """
        System - a model defined in Swagger
        """

        self._organization = None
        self._created = None
        self._last_contact = None
        self._os = None
        self._version = None
        self._arch = None
        self._network_interfaces = None
        self._hostname = None
        self._display_name = None
        self._system_timezone = None
        self._template_name = None
        self._remote_ip = None
        self._active = None
        self._sshd_params = None
        self._allow_ssh_password_authentication = None
        self._allow_ssh_root_login = None
        self._allow_multi_factor_authentication = None
        self._allow_public_key_authentication = None
        self._modify_sshd_config = None
        self._agent_version = None
        self._connection_history = None
        self._ssh_root_enabled = None
        self._id = None
        self._tags = None
        self._id = None

        if organization is not None:
          self.organization = organization
        if created is not None:
          self.created = created
        if last_contact is not None:
          self.last_contact = last_contact
        if os is not None:
          self.os = os
        if version is not None:
          self.version = version
        if arch is not None:
          self.arch = arch
        if network_interfaces is not None:
          self.network_interfaces = network_interfaces
        if hostname is not None:
          self.hostname = hostname
        if display_name is not None:
          self.display_name = display_name
        if system_timezone is not None:
          self.system_timezone = system_timezone
        if template_name is not None:
          self.template_name = template_name
        if remote_ip is not None:
          self.remote_ip = remote_ip
        if active is not None:
          self.active = active
        if sshd_params is not None:
          self.sshd_params = sshd_params
        if allow_ssh_password_authentication is not None:
          self.allow_ssh_password_authentication = allow_ssh_password_authentication
        if allow_ssh_root_login is not None:
          self.allow_ssh_root_login = allow_ssh_root_login
        if allow_multi_factor_authentication is not None:
          self.allow_multi_factor_authentication = allow_multi_factor_authentication
        if allow_public_key_authentication is not None:
          self.allow_public_key_authentication = allow_public_key_authentication
        if modify_sshd_config is not None:
          self.modify_sshd_config = modify_sshd_config
        if agent_version is not None:
          self.agent_version = agent_version
        if connection_history is not None:
          self.connection_history = connection_history
        if ssh_root_enabled is not None:
          self.ssh_root_enabled = ssh_root_enabled
        if id is not None:
          self.id = id
        if tags is not None:
          self.tags = tags
        if id is not None:
          self.id = id

    @property
    def organization(self):
        """
        Gets the organization of this System.

        :return: The organization of this System.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this System.

        :param organization: The organization of this System.
        :type: str
        """

        self._organization = organization

    @property
    def created(self):
        """
        Gets the created of this System.

        :return: The created of this System.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this System.

        :param created: The created of this System.
        :type: str
        """

        self._created = created

    @property
    def last_contact(self):
        """
        Gets the last_contact of this System.

        :return: The last_contact of this System.
        :rtype: str
        """
        return self._last_contact

    @last_contact.setter
    def last_contact(self, last_contact):
        """
        Sets the last_contact of this System.

        :param last_contact: The last_contact of this System.
        :type: str
        """

        self._last_contact = last_contact

    @property
    def os(self):
        """
        Gets the os of this System.

        :return: The os of this System.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this System.

        :param os: The os of this System.
        :type: str
        """

        self._os = os

    @property
    def version(self):
        """
        Gets the version of this System.

        :return: The version of this System.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this System.

        :param version: The version of this System.
        :type: str
        """

        self._version = version

    @property
    def arch(self):
        """
        Gets the arch of this System.

        :return: The arch of this System.
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """
        Sets the arch of this System.

        :param arch: The arch of this System.
        :type: str
        """

        self._arch = arch

    @property
    def network_interfaces(self):
        """
        Gets the network_interfaces of this System.

        :return: The network_interfaces of this System.
        :rtype: list[SystemNetworkInterfaces]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """
        Sets the network_interfaces of this System.

        :param network_interfaces: The network_interfaces of this System.
        :type: list[SystemNetworkInterfaces]
        """

        self._network_interfaces = network_interfaces

    @property
    def hostname(self):
        """
        Gets the hostname of this System.

        :return: The hostname of this System.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this System.

        :param hostname: The hostname of this System.
        :type: str
        """

        self._hostname = hostname

    @property
    def display_name(self):
        """
        Gets the display_name of this System.

        :return: The display_name of this System.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this System.

        :param display_name: The display_name of this System.
        :type: str
        """

        self._display_name = display_name

    @property
    def system_timezone(self):
        """
        Gets the system_timezone of this System.

        :return: The system_timezone of this System.
        :rtype: int
        """
        return self._system_timezone

    @system_timezone.setter
    def system_timezone(self, system_timezone):
        """
        Sets the system_timezone of this System.

        :param system_timezone: The system_timezone of this System.
        :type: int
        """

        self._system_timezone = system_timezone

    @property
    def template_name(self):
        """
        Gets the template_name of this System.

        :return: The template_name of this System.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """
        Sets the template_name of this System.

        :param template_name: The template_name of this System.
        :type: str
        """

        self._template_name = template_name

    @property
    def remote_ip(self):
        """
        Gets the remote_ip of this System.

        :return: The remote_ip of this System.
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """
        Sets the remote_ip of this System.

        :param remote_ip: The remote_ip of this System.
        :type: str
        """

        self._remote_ip = remote_ip

    @property
    def active(self):
        """
        Gets the active of this System.

        :return: The active of this System.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this System.

        :param active: The active of this System.
        :type: bool
        """

        self._active = active

    @property
    def sshd_params(self):
        """
        Gets the sshd_params of this System.

        :return: The sshd_params of this System.
        :rtype: list[str]
        """
        return self._sshd_params

    @sshd_params.setter
    def sshd_params(self, sshd_params):
        """
        Sets the sshd_params of this System.

        :param sshd_params: The sshd_params of this System.
        :type: list[str]
        """

        self._sshd_params = sshd_params

    @property
    def allow_ssh_password_authentication(self):
        """
        Gets the allow_ssh_password_authentication of this System.

        :return: The allow_ssh_password_authentication of this System.
        :rtype: bool
        """
        return self._allow_ssh_password_authentication

    @allow_ssh_password_authentication.setter
    def allow_ssh_password_authentication(self, allow_ssh_password_authentication):
        """
        Sets the allow_ssh_password_authentication of this System.

        :param allow_ssh_password_authentication: The allow_ssh_password_authentication of this System.
        :type: bool
        """

        self._allow_ssh_password_authentication = allow_ssh_password_authentication

    @property
    def allow_ssh_root_login(self):
        """
        Gets the allow_ssh_root_login of this System.

        :return: The allow_ssh_root_login of this System.
        :rtype: bool
        """
        return self._allow_ssh_root_login

    @allow_ssh_root_login.setter
    def allow_ssh_root_login(self, allow_ssh_root_login):
        """
        Sets the allow_ssh_root_login of this System.

        :param allow_ssh_root_login: The allow_ssh_root_login of this System.
        :type: bool
        """

        self._allow_ssh_root_login = allow_ssh_root_login

    @property
    def allow_multi_factor_authentication(self):
        """
        Gets the allow_multi_factor_authentication of this System.

        :return: The allow_multi_factor_authentication of this System.
        :rtype: bool
        """
        return self._allow_multi_factor_authentication

    @allow_multi_factor_authentication.setter
    def allow_multi_factor_authentication(self, allow_multi_factor_authentication):
        """
        Sets the allow_multi_factor_authentication of this System.

        :param allow_multi_factor_authentication: The allow_multi_factor_authentication of this System.
        :type: bool
        """

        self._allow_multi_factor_authentication = allow_multi_factor_authentication

    @property
    def allow_public_key_authentication(self):
        """
        Gets the allow_public_key_authentication of this System.

        :return: The allow_public_key_authentication of this System.
        :rtype: bool
        """
        return self._allow_public_key_authentication

    @allow_public_key_authentication.setter
    def allow_public_key_authentication(self, allow_public_key_authentication):
        """
        Sets the allow_public_key_authentication of this System.

        :param allow_public_key_authentication: The allow_public_key_authentication of this System.
        :type: bool
        """

        self._allow_public_key_authentication = allow_public_key_authentication

    @property
    def modify_sshd_config(self):
        """
        Gets the modify_sshd_config of this System.

        :return: The modify_sshd_config of this System.
        :rtype: bool
        """
        return self._modify_sshd_config

    @modify_sshd_config.setter
    def modify_sshd_config(self, modify_sshd_config):
        """
        Sets the modify_sshd_config of this System.

        :param modify_sshd_config: The modify_sshd_config of this System.
        :type: bool
        """

        self._modify_sshd_config = modify_sshd_config

    @property
    def agent_version(self):
        """
        Gets the agent_version of this System.

        :return: The agent_version of this System.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """
        Sets the agent_version of this System.

        :param agent_version: The agent_version of this System.
        :type: str
        """

        self._agent_version = agent_version

    @property
    def connection_history(self):
        """
        Gets the connection_history of this System.

        :return: The connection_history of this System.
        :rtype: list[object]
        """
        return self._connection_history

    @connection_history.setter
    def connection_history(self, connection_history):
        """
        Sets the connection_history of this System.

        :param connection_history: The connection_history of this System.
        :type: list[object]
        """

        self._connection_history = connection_history

    @property
    def ssh_root_enabled(self):
        """
        Gets the ssh_root_enabled of this System.

        :return: The ssh_root_enabled of this System.
        :rtype: bool
        """
        return self._ssh_root_enabled

    @ssh_root_enabled.setter
    def ssh_root_enabled(self, ssh_root_enabled):
        """
        Sets the ssh_root_enabled of this System.

        :param ssh_root_enabled: The ssh_root_enabled of this System.
        :type: bool
        """

        self._ssh_root_enabled = ssh_root_enabled

    @property
    def id(self):
        """
        Gets the id of this System.

        :return: The id of this System.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this System.

        :param id: The id of this System.
        :type: str
        """

        self._id = id

    @property
    def tags(self):
        """
        Gets the tags of this System.

        :return: The tags of this System.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this System.

        :param tags: The tags of this System.
        :type: list[str]
        """

        self._tags = tags

    @property
    def id(self):
        """
        Gets the id of this System.

        :return: The id of this System.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this System.

        :param id: The id of this System.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, System):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
