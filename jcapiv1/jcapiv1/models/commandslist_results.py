# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommandslistResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'command': 'str',
        'command_type': 'str',
        'launch_type': 'str',
        'listens_to': 'str',
        'schedule': 'str',
        'trigger': 'str',
        'schedule_repeat_type': 'str',
        'organization': 'str',
        'id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'command': 'command',
        'command_type': 'commandType',
        'launch_type': 'launchType',
        'listens_to': 'listensTo',
        'schedule': 'schedule',
        'trigger': 'trigger',
        'schedule_repeat_type': 'scheduleRepeatType',
        'organization': 'organization',
        'id': '_id'
    }

    def __init__(self, name=None, command=None, command_type=None, launch_type=None, listens_to=None, schedule=None, trigger=None, schedule_repeat_type=None, organization=None, id=None):  # noqa: E501
        """CommandslistResults - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._command = None
        self._command_type = None
        self._launch_type = None
        self._listens_to = None
        self._schedule = None
        self._trigger = None
        self._schedule_repeat_type = None
        self._organization = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if command is not None:
            self.command = command
        if command_type is not None:
            self.command_type = command_type
        if launch_type is not None:
            self.launch_type = launch_type
        if listens_to is not None:
            self.listens_to = listens_to
        if schedule is not None:
            self.schedule = schedule
        if trigger is not None:
            self.trigger = trigger
        if schedule_repeat_type is not None:
            self.schedule_repeat_type = schedule_repeat_type
        if organization is not None:
            self.organization = organization
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this CommandslistResults.  # noqa: E501

        The name of the Command.  # noqa: E501

        :return: The name of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommandslistResults.

        The name of the Command.  # noqa: E501

        :param name: The name of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def command(self):
        """Gets the command of this CommandslistResults.  # noqa: E501

        The Command to execute.  # noqa: E501

        :return: The command of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this CommandslistResults.

        The Command to execute.  # noqa: E501

        :param command: The command of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def command_type(self):
        """Gets the command_type of this CommandslistResults.  # noqa: E501

        The Command OS.  # noqa: E501

        :return: The command_type of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._command_type

    @command_type.setter
    def command_type(self, command_type):
        """Sets the command_type of this CommandslistResults.

        The Command OS.  # noqa: E501

        :param command_type: The command_type of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._command_type = command_type

    @property
    def launch_type(self):
        """Gets the launch_type of this CommandslistResults.  # noqa: E501

        How the Command is executed.  # noqa: E501

        :return: The launch_type of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._launch_type

    @launch_type.setter
    def launch_type(self, launch_type):
        """Sets the launch_type of this CommandslistResults.

        How the Command is executed.  # noqa: E501

        :param launch_type: The launch_type of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._launch_type = launch_type

    @property
    def listens_to(self):
        """Gets the listens_to of this CommandslistResults.  # noqa: E501

          # noqa: E501

        :return: The listens_to of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._listens_to

    @listens_to.setter
    def listens_to(self, listens_to):
        """Sets the listens_to of this CommandslistResults.

          # noqa: E501

        :param listens_to: The listens_to of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._listens_to = listens_to

    @property
    def schedule(self):
        """Gets the schedule of this CommandslistResults.  # noqa: E501

        A crontab that consists of: [ (seconds) (minutes) (hours) (days of month) (months) (weekdays) ] or [ immediate ]. If you send this as an empty string, it will run immediately.   # noqa: E501

        :return: The schedule of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CommandslistResults.

        A crontab that consists of: [ (seconds) (minutes) (hours) (days of month) (months) (weekdays) ] or [ immediate ]. If you send this as an empty string, it will run immediately.   # noqa: E501

        :param schedule: The schedule of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def trigger(self):
        """Gets the trigger of this CommandslistResults.  # noqa: E501

        Trigger to execute command.  # noqa: E501

        :return: The trigger of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this CommandslistResults.

        Trigger to execute command.  # noqa: E501

        :param trigger: The trigger of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._trigger = trigger

    @property
    def schedule_repeat_type(self):
        """Gets the schedule_repeat_type of this CommandslistResults.  # noqa: E501

        When the command will repeat.  # noqa: E501

        :return: The schedule_repeat_type of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._schedule_repeat_type

    @schedule_repeat_type.setter
    def schedule_repeat_type(self, schedule_repeat_type):
        """Sets the schedule_repeat_type of this CommandslistResults.

        When the command will repeat.  # noqa: E501

        :param schedule_repeat_type: The schedule_repeat_type of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._schedule_repeat_type = schedule_repeat_type

    @property
    def organization(self):
        """Gets the organization of this CommandslistResults.  # noqa: E501

        The ID of the Organization.  # noqa: E501

        :return: The organization of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CommandslistResults.

        The ID of the Organization.  # noqa: E501

        :param organization: The organization of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def id(self):
        """Gets the id of this CommandslistResults.  # noqa: E501

        The ID of the command.  # noqa: E501

        :return: The id of this CommandslistResults.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommandslistResults.

        The ID of the command.  # noqa: E501

        :param id: The id of this CommandslistResults.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandslistResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
