# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jcapiv1.models.organizationsettings_features import OrganizationsettingsFeatures  # noqa: F401,E501
from jcapiv1.models.organizationsettings_password_policy import OrganizationsettingsPasswordPolicy  # noqa: F401,E501
from jcapiv1.models.organizationsettings_user_portal import OrganizationsettingsUserPortal  # noqa: F401,E501


class Organizationsettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_email': 'str',
        'contact_name': 'str',
        'disable_ldap': 'bool',
        'disable_um': 'bool',
        'duplicate_ldap_groups': 'bool',
        'email_disclaimer': 'str',
        'enable_managed_uid': 'bool',
        'features': 'OrganizationsettingsFeatures',
        'logo': 'str',
        'name': 'str',
        'password_compliance': 'str',
        'password_policy': 'OrganizationsettingsPasswordPolicy',
        'show_intro': 'bool',
        'system_user_password_expiration_in_days': 'int',
        'system_users_can_edit': 'bool',
        'user_portal': 'OrganizationsettingsUserPortal'
    }

    attribute_map = {
        'contact_email': 'contactEmail',
        'contact_name': 'contactName',
        'disable_ldap': 'disableLdap',
        'disable_um': 'disableUM',
        'duplicate_ldap_groups': 'duplicateLDAPGroups',
        'email_disclaimer': 'emailDisclaimer',
        'enable_managed_uid': 'enableManagedUID',
        'features': 'features',
        'logo': 'logo',
        'name': 'name',
        'password_compliance': 'passwordCompliance',
        'password_policy': 'passwordPolicy',
        'show_intro': 'showIntro',
        'system_user_password_expiration_in_days': 'systemUserPasswordExpirationInDays',
        'system_users_can_edit': 'systemUsersCanEdit',
        'user_portal': 'userPortal'
    }

    def __init__(self, contact_email=None, contact_name=None, disable_ldap=None, disable_um=None, duplicate_ldap_groups=None, email_disclaimer=None, enable_managed_uid=None, features=None, logo=None, name=None, password_compliance=None, password_policy=None, show_intro=None, system_user_password_expiration_in_days=None, system_users_can_edit=None, user_portal=None):  # noqa: E501
        """Organizationsettings - a model defined in Swagger"""  # noqa: E501

        self._contact_email = None
        self._contact_name = None
        self._disable_ldap = None
        self._disable_um = None
        self._duplicate_ldap_groups = None
        self._email_disclaimer = None
        self._enable_managed_uid = None
        self._features = None
        self._logo = None
        self._name = None
        self._password_compliance = None
        self._password_policy = None
        self._show_intro = None
        self._system_user_password_expiration_in_days = None
        self._system_users_can_edit = None
        self._user_portal = None
        self.discriminator = None

        if contact_email is not None:
            self.contact_email = contact_email
        if contact_name is not None:
            self.contact_name = contact_name
        if disable_ldap is not None:
            self.disable_ldap = disable_ldap
        if disable_um is not None:
            self.disable_um = disable_um
        if duplicate_ldap_groups is not None:
            self.duplicate_ldap_groups = duplicate_ldap_groups
        if email_disclaimer is not None:
            self.email_disclaimer = email_disclaimer
        if enable_managed_uid is not None:
            self.enable_managed_uid = enable_managed_uid
        if features is not None:
            self.features = features
        if logo is not None:
            self.logo = logo
        if name is not None:
            self.name = name
        if password_compliance is not None:
            self.password_compliance = password_compliance
        if password_policy is not None:
            self.password_policy = password_policy
        if show_intro is not None:
            self.show_intro = show_intro
        if system_user_password_expiration_in_days is not None:
            self.system_user_password_expiration_in_days = system_user_password_expiration_in_days
        if system_users_can_edit is not None:
            self.system_users_can_edit = system_users_can_edit
        if user_portal is not None:
            self.user_portal = user_portal

    @property
    def contact_email(self):
        """Gets the contact_email of this Organizationsettings.  # noqa: E501


        :return: The contact_email of this Organizationsettings.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Organizationsettings.


        :param contact_email: The contact_email of this Organizationsettings.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """Gets the contact_name of this Organizationsettings.  # noqa: E501


        :return: The contact_name of this Organizationsettings.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this Organizationsettings.


        :param contact_name: The contact_name of this Organizationsettings.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def disable_ldap(self):
        """Gets the disable_ldap of this Organizationsettings.  # noqa: E501


        :return: The disable_ldap of this Organizationsettings.  # noqa: E501
        :rtype: bool
        """
        return self._disable_ldap

    @disable_ldap.setter
    def disable_ldap(self, disable_ldap):
        """Sets the disable_ldap of this Organizationsettings.


        :param disable_ldap: The disable_ldap of this Organizationsettings.  # noqa: E501
        :type: bool
        """

        self._disable_ldap = disable_ldap

    @property
    def disable_um(self):
        """Gets the disable_um of this Organizationsettings.  # noqa: E501


        :return: The disable_um of this Organizationsettings.  # noqa: E501
        :rtype: bool
        """
        return self._disable_um

    @disable_um.setter
    def disable_um(self, disable_um):
        """Sets the disable_um of this Organizationsettings.


        :param disable_um: The disable_um of this Organizationsettings.  # noqa: E501
        :type: bool
        """

        self._disable_um = disable_um

    @property
    def duplicate_ldap_groups(self):
        """Gets the duplicate_ldap_groups of this Organizationsettings.  # noqa: E501


        :return: The duplicate_ldap_groups of this Organizationsettings.  # noqa: E501
        :rtype: bool
        """
        return self._duplicate_ldap_groups

    @duplicate_ldap_groups.setter
    def duplicate_ldap_groups(self, duplicate_ldap_groups):
        """Sets the duplicate_ldap_groups of this Organizationsettings.


        :param duplicate_ldap_groups: The duplicate_ldap_groups of this Organizationsettings.  # noqa: E501
        :type: bool
        """

        self._duplicate_ldap_groups = duplicate_ldap_groups

    @property
    def email_disclaimer(self):
        """Gets the email_disclaimer of this Organizationsettings.  # noqa: E501


        :return: The email_disclaimer of this Organizationsettings.  # noqa: E501
        :rtype: str
        """
        return self._email_disclaimer

    @email_disclaimer.setter
    def email_disclaimer(self, email_disclaimer):
        """Sets the email_disclaimer of this Organizationsettings.


        :param email_disclaimer: The email_disclaimer of this Organizationsettings.  # noqa: E501
        :type: str
        """

        self._email_disclaimer = email_disclaimer

    @property
    def enable_managed_uid(self):
        """Gets the enable_managed_uid of this Organizationsettings.  # noqa: E501


        :return: The enable_managed_uid of this Organizationsettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_managed_uid

    @enable_managed_uid.setter
    def enable_managed_uid(self, enable_managed_uid):
        """Sets the enable_managed_uid of this Organizationsettings.


        :param enable_managed_uid: The enable_managed_uid of this Organizationsettings.  # noqa: E501
        :type: bool
        """

        self._enable_managed_uid = enable_managed_uid

    @property
    def features(self):
        """Gets the features of this Organizationsettings.  # noqa: E501


        :return: The features of this Organizationsettings.  # noqa: E501
        :rtype: OrganizationsettingsFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Organizationsettings.


        :param features: The features of this Organizationsettings.  # noqa: E501
        :type: OrganizationsettingsFeatures
        """

        self._features = features

    @property
    def logo(self):
        """Gets the logo of this Organizationsettings.  # noqa: E501


        :return: The logo of this Organizationsettings.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Organizationsettings.


        :param logo: The logo of this Organizationsettings.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Organizationsettings.  # noqa: E501


        :return: The name of this Organizationsettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organizationsettings.


        :param name: The name of this Organizationsettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password_compliance(self):
        """Gets the password_compliance of this Organizationsettings.  # noqa: E501


        :return: The password_compliance of this Organizationsettings.  # noqa: E501
        :rtype: str
        """
        return self._password_compliance

    @password_compliance.setter
    def password_compliance(self, password_compliance):
        """Sets the password_compliance of this Organizationsettings.


        :param password_compliance: The password_compliance of this Organizationsettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["custom", "pci3", "windows"]  # noqa: E501
        if password_compliance not in allowed_values:
            raise ValueError(
                "Invalid value for `password_compliance` ({0}), must be one of {1}"  # noqa: E501
                .format(password_compliance, allowed_values)
            )

        self._password_compliance = password_compliance

    @property
    def password_policy(self):
        """Gets the password_policy of this Organizationsettings.  # noqa: E501


        :return: The password_policy of this Organizationsettings.  # noqa: E501
        :rtype: OrganizationsettingsPasswordPolicy
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this Organizationsettings.


        :param password_policy: The password_policy of this Organizationsettings.  # noqa: E501
        :type: OrganizationsettingsPasswordPolicy
        """

        self._password_policy = password_policy

    @property
    def show_intro(self):
        """Gets the show_intro of this Organizationsettings.  # noqa: E501


        :return: The show_intro of this Organizationsettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_intro

    @show_intro.setter
    def show_intro(self, show_intro):
        """Sets the show_intro of this Organizationsettings.


        :param show_intro: The show_intro of this Organizationsettings.  # noqa: E501
        :type: bool
        """

        self._show_intro = show_intro

    @property
    def system_user_password_expiration_in_days(self):
        """Gets the system_user_password_expiration_in_days of this Organizationsettings.  # noqa: E501


        :return: The system_user_password_expiration_in_days of this Organizationsettings.  # noqa: E501
        :rtype: int
        """
        return self._system_user_password_expiration_in_days

    @system_user_password_expiration_in_days.setter
    def system_user_password_expiration_in_days(self, system_user_password_expiration_in_days):
        """Sets the system_user_password_expiration_in_days of this Organizationsettings.


        :param system_user_password_expiration_in_days: The system_user_password_expiration_in_days of this Organizationsettings.  # noqa: E501
        :type: int
        """

        self._system_user_password_expiration_in_days = system_user_password_expiration_in_days

    @property
    def system_users_can_edit(self):
        """Gets the system_users_can_edit of this Organizationsettings.  # noqa: E501


        :return: The system_users_can_edit of this Organizationsettings.  # noqa: E501
        :rtype: bool
        """
        return self._system_users_can_edit

    @system_users_can_edit.setter
    def system_users_can_edit(self, system_users_can_edit):
        """Sets the system_users_can_edit of this Organizationsettings.


        :param system_users_can_edit: The system_users_can_edit of this Organizationsettings.  # noqa: E501
        :type: bool
        """

        self._system_users_can_edit = system_users_can_edit

    @property
    def user_portal(self):
        """Gets the user_portal of this Organizationsettings.  # noqa: E501


        :return: The user_portal of this Organizationsettings.  # noqa: E501
        :rtype: OrganizationsettingsUserPortal
        """
        return self._user_portal

    @user_portal.setter
    def user_portal(self, user_portal):
        """Sets the user_portal of this Organizationsettings.


        :param user_portal: The user_portal of this Organizationsettings.  # noqa: E501
        :type: OrganizationsettingsUserPortal
        """

        self._user_portal = user_portal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organizationsettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organizationsettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
