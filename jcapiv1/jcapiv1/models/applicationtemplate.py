# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jcapiv1.models.application_config import ApplicationConfig  # noqa: F401,E501
from jcapiv1.models.applicationtemplate_jit import ApplicationtemplateJit  # noqa: F401,E501


class Applicationtemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'beta': 'bool',
        'color': 'str',
        'config': 'ApplicationConfig',
        'display_label': 'str',
        'display_name': 'str',
        'is_configured': 'bool',
        'jit': 'ApplicationtemplateJit',
        'learn_more': 'str',
        'name': 'str',
        'sso_url': 'str'
    }

    attribute_map = {
        'id': '_id',
        'beta': 'beta',
        'color': 'color',
        'config': 'config',
        'display_label': 'displayLabel',
        'display_name': 'displayName',
        'is_configured': 'isConfigured',
        'jit': 'jit',
        'learn_more': 'learnMore',
        'name': 'name',
        'sso_url': 'ssoUrl'
    }

    def __init__(self, id=None, beta=None, color=None, config=None, display_label=None, display_name=None, is_configured=None, jit=None, learn_more=None, name=None, sso_url=None):  # noqa: E501
        """Applicationtemplate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._beta = None
        self._color = None
        self._config = None
        self._display_label = None
        self._display_name = None
        self._is_configured = None
        self._jit = None
        self._learn_more = None
        self._name = None
        self._sso_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if beta is not None:
            self.beta = beta
        if color is not None:
            self.color = color
        if config is not None:
            self.config = config
        if display_label is not None:
            self.display_label = display_label
        if display_name is not None:
            self.display_name = display_name
        if is_configured is not None:
            self.is_configured = is_configured
        if jit is not None:
            self.jit = jit
        if learn_more is not None:
            self.learn_more = learn_more
        if name is not None:
            self.name = name
        if sso_url is not None:
            self.sso_url = sso_url

    @property
    def id(self):
        """Gets the id of this Applicationtemplate.  # noqa: E501


        :return: The id of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Applicationtemplate.


        :param id: The id of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def beta(self):
        """Gets the beta of this Applicationtemplate.  # noqa: E501


        :return: The beta of this Applicationtemplate.  # noqa: E501
        :rtype: bool
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this Applicationtemplate.


        :param beta: The beta of this Applicationtemplate.  # noqa: E501
        :type: bool
        """

        self._beta = beta

    @property
    def color(self):
        """Gets the color of this Applicationtemplate.  # noqa: E501


        :return: The color of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Applicationtemplate.


        :param color: The color of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def config(self):
        """Gets the config of this Applicationtemplate.  # noqa: E501


        :return: The config of this Applicationtemplate.  # noqa: E501
        :rtype: ApplicationConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Applicationtemplate.


        :param config: The config of this Applicationtemplate.  # noqa: E501
        :type: ApplicationConfig
        """

        self._config = config

    @property
    def display_label(self):
        """Gets the display_label of this Applicationtemplate.  # noqa: E501


        :return: The display_label of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._display_label

    @display_label.setter
    def display_label(self, display_label):
        """Sets the display_label of this Applicationtemplate.


        :param display_label: The display_label of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._display_label = display_label

    @property
    def display_name(self):
        """Gets the display_name of this Applicationtemplate.  # noqa: E501


        :return: The display_name of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Applicationtemplate.


        :param display_name: The display_name of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_configured(self):
        """Gets the is_configured of this Applicationtemplate.  # noqa: E501


        :return: The is_configured of this Applicationtemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_configured

    @is_configured.setter
    def is_configured(self, is_configured):
        """Sets the is_configured of this Applicationtemplate.


        :param is_configured: The is_configured of this Applicationtemplate.  # noqa: E501
        :type: bool
        """

        self._is_configured = is_configured

    @property
    def jit(self):
        """Gets the jit of this Applicationtemplate.  # noqa: E501


        :return: The jit of this Applicationtemplate.  # noqa: E501
        :rtype: ApplicationtemplateJit
        """
        return self._jit

    @jit.setter
    def jit(self, jit):
        """Sets the jit of this Applicationtemplate.


        :param jit: The jit of this Applicationtemplate.  # noqa: E501
        :type: ApplicationtemplateJit
        """

        self._jit = jit

    @property
    def learn_more(self):
        """Gets the learn_more of this Applicationtemplate.  # noqa: E501


        :return: The learn_more of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._learn_more

    @learn_more.setter
    def learn_more(self, learn_more):
        """Sets the learn_more of this Applicationtemplate.


        :param learn_more: The learn_more of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._learn_more = learn_more

    @property
    def name(self):
        """Gets the name of this Applicationtemplate.  # noqa: E501


        :return: The name of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Applicationtemplate.


        :param name: The name of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sso_url(self):
        """Gets the sso_url of this Applicationtemplate.  # noqa: E501


        :return: The sso_url of this Applicationtemplate.  # noqa: E501
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this Applicationtemplate.


        :param sso_url: The sso_url of this Applicationtemplate.  # noqa: E501
        :type: str
        """

        self._sso_url = sso_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Applicationtemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Applicationtemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
