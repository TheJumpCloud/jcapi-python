# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationsettingsPasswordPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_username_substring': 'bool',
        'days_after_expiration_to_self_recover': 'int',
        'days_before_expiration_to_force_reset': 'int',
        'enable_days_after_expiration_to_self_recover': 'bool',
        'enable_days_before_expiration_to_force_reset': 'bool',
        'enable_lockout_time_in_seconds': 'bool',
        'enable_max_history': 'bool',
        'enable_max_login_attempts': 'bool',
        'enable_min_change_period_in_days': 'bool',
        'enable_min_length': 'bool',
        'enable_password_expiration_in_days': 'bool',
        'lockout_time_in_seconds': 'int',
        'max_history': 'int',
        'max_login_attempts': 'int',
        'min_change_period_in_days': 'int',
        'min_length': 'int',
        'needs_lowercase': 'bool',
        'needs_numeric': 'bool',
        'needs_symbolic': 'bool',
        'needs_uppercase': 'bool',
        'password_expiration_in_days': 'int'
    }

    attribute_map = {
        'allow_username_substring': 'allowUsernameSubstring',
        'days_after_expiration_to_self_recover': 'daysAfterExpirationToSelfRecover',
        'days_before_expiration_to_force_reset': 'daysBeforeExpirationToForceReset',
        'enable_days_after_expiration_to_self_recover': 'enableDaysAfterExpirationToSelfRecover',
        'enable_days_before_expiration_to_force_reset': 'enableDaysBeforeExpirationToForceReset',
        'enable_lockout_time_in_seconds': 'enableLockoutTimeInSeconds',
        'enable_max_history': 'enableMaxHistory',
        'enable_max_login_attempts': 'enableMaxLoginAttempts',
        'enable_min_change_period_in_days': 'enableMinChangePeriodInDays',
        'enable_min_length': 'enableMinLength',
        'enable_password_expiration_in_days': 'enablePasswordExpirationInDays',
        'lockout_time_in_seconds': 'lockoutTimeInSeconds',
        'max_history': 'maxHistory',
        'max_login_attempts': 'maxLoginAttempts',
        'min_change_period_in_days': 'minChangePeriodInDays',
        'min_length': 'minLength',
        'needs_lowercase': 'needsLowercase',
        'needs_numeric': 'needsNumeric',
        'needs_symbolic': 'needsSymbolic',
        'needs_uppercase': 'needsUppercase',
        'password_expiration_in_days': 'passwordExpirationInDays'
    }

    def __init__(self, allow_username_substring=None, days_after_expiration_to_self_recover=None, days_before_expiration_to_force_reset=None, enable_days_after_expiration_to_self_recover=None, enable_days_before_expiration_to_force_reset=None, enable_lockout_time_in_seconds=None, enable_max_history=None, enable_max_login_attempts=None, enable_min_change_period_in_days=None, enable_min_length=None, enable_password_expiration_in_days=None, lockout_time_in_seconds=None, max_history=None, max_login_attempts=None, min_change_period_in_days=None, min_length=None, needs_lowercase=None, needs_numeric=None, needs_symbolic=None, needs_uppercase=None, password_expiration_in_days=None):  # noqa: E501
        """OrganizationsettingsPasswordPolicy - a model defined in Swagger"""  # noqa: E501

        self._allow_username_substring = None
        self._days_after_expiration_to_self_recover = None
        self._days_before_expiration_to_force_reset = None
        self._enable_days_after_expiration_to_self_recover = None
        self._enable_days_before_expiration_to_force_reset = None
        self._enable_lockout_time_in_seconds = None
        self._enable_max_history = None
        self._enable_max_login_attempts = None
        self._enable_min_change_period_in_days = None
        self._enable_min_length = None
        self._enable_password_expiration_in_days = None
        self._lockout_time_in_seconds = None
        self._max_history = None
        self._max_login_attempts = None
        self._min_change_period_in_days = None
        self._min_length = None
        self._needs_lowercase = None
        self._needs_numeric = None
        self._needs_symbolic = None
        self._needs_uppercase = None
        self._password_expiration_in_days = None
        self.discriminator = None

        if allow_username_substring is not None:
            self.allow_username_substring = allow_username_substring
        if days_after_expiration_to_self_recover is not None:
            self.days_after_expiration_to_self_recover = days_after_expiration_to_self_recover
        if days_before_expiration_to_force_reset is not None:
            self.days_before_expiration_to_force_reset = days_before_expiration_to_force_reset
        if enable_days_after_expiration_to_self_recover is not None:
            self.enable_days_after_expiration_to_self_recover = enable_days_after_expiration_to_self_recover
        if enable_days_before_expiration_to_force_reset is not None:
            self.enable_days_before_expiration_to_force_reset = enable_days_before_expiration_to_force_reset
        if enable_lockout_time_in_seconds is not None:
            self.enable_lockout_time_in_seconds = enable_lockout_time_in_seconds
        if enable_max_history is not None:
            self.enable_max_history = enable_max_history
        if enable_max_login_attempts is not None:
            self.enable_max_login_attempts = enable_max_login_attempts
        if enable_min_change_period_in_days is not None:
            self.enable_min_change_period_in_days = enable_min_change_period_in_days
        if enable_min_length is not None:
            self.enable_min_length = enable_min_length
        if enable_password_expiration_in_days is not None:
            self.enable_password_expiration_in_days = enable_password_expiration_in_days
        if lockout_time_in_seconds is not None:
            self.lockout_time_in_seconds = lockout_time_in_seconds
        if max_history is not None:
            self.max_history = max_history
        if max_login_attempts is not None:
            self.max_login_attempts = max_login_attempts
        if min_change_period_in_days is not None:
            self.min_change_period_in_days = min_change_period_in_days
        if min_length is not None:
            self.min_length = min_length
        if needs_lowercase is not None:
            self.needs_lowercase = needs_lowercase
        if needs_numeric is not None:
            self.needs_numeric = needs_numeric
        if needs_symbolic is not None:
            self.needs_symbolic = needs_symbolic
        if needs_uppercase is not None:
            self.needs_uppercase = needs_uppercase
        if password_expiration_in_days is not None:
            self.password_expiration_in_days = password_expiration_in_days

    @property
    def allow_username_substring(self):
        """Gets the allow_username_substring of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The allow_username_substring of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._allow_username_substring

    @allow_username_substring.setter
    def allow_username_substring(self, allow_username_substring):
        """Sets the allow_username_substring of this OrganizationsettingsPasswordPolicy.


        :param allow_username_substring: The allow_username_substring of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._allow_username_substring = allow_username_substring

    @property
    def days_after_expiration_to_self_recover(self):
        """Gets the days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._days_after_expiration_to_self_recover

    @days_after_expiration_to_self_recover.setter
    def days_after_expiration_to_self_recover(self, days_after_expiration_to_self_recover):
        """Sets the days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.


        :param days_after_expiration_to_self_recover: The days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """
        if days_after_expiration_to_self_recover is not None and days_after_expiration_to_self_recover < 1:  # noqa: E501
            raise ValueError("Invalid value for `days_after_expiration_to_self_recover`, must be a value greater than or equal to `1`")  # noqa: E501

        self._days_after_expiration_to_self_recover = days_after_expiration_to_self_recover

    @property
    def days_before_expiration_to_force_reset(self):
        """Gets the days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._days_before_expiration_to_force_reset

    @days_before_expiration_to_force_reset.setter
    def days_before_expiration_to_force_reset(self, days_before_expiration_to_force_reset):
        """Sets the days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.


        :param days_before_expiration_to_force_reset: The days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """
        if days_before_expiration_to_force_reset is not None and days_before_expiration_to_force_reset < 1:  # noqa: E501
            raise ValueError("Invalid value for `days_before_expiration_to_force_reset`, must be a value greater than or equal to `1`")  # noqa: E501

        self._days_before_expiration_to_force_reset = days_before_expiration_to_force_reset

    @property
    def enable_days_after_expiration_to_self_recover(self):
        """Gets the enable_days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_days_after_expiration_to_self_recover

    @enable_days_after_expiration_to_self_recover.setter
    def enable_days_after_expiration_to_self_recover(self, enable_days_after_expiration_to_self_recover):
        """Sets the enable_days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.


        :param enable_days_after_expiration_to_self_recover: The enable_days_after_expiration_to_self_recover of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_days_after_expiration_to_self_recover = enable_days_after_expiration_to_self_recover

    @property
    def enable_days_before_expiration_to_force_reset(self):
        """Gets the enable_days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_days_before_expiration_to_force_reset

    @enable_days_before_expiration_to_force_reset.setter
    def enable_days_before_expiration_to_force_reset(self, enable_days_before_expiration_to_force_reset):
        """Sets the enable_days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.


        :param enable_days_before_expiration_to_force_reset: The enable_days_before_expiration_to_force_reset of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_days_before_expiration_to_force_reset = enable_days_before_expiration_to_force_reset

    @property
    def enable_lockout_time_in_seconds(self):
        """Gets the enable_lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_lockout_time_in_seconds

    @enable_lockout_time_in_seconds.setter
    def enable_lockout_time_in_seconds(self, enable_lockout_time_in_seconds):
        """Sets the enable_lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.


        :param enable_lockout_time_in_seconds: The enable_lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_lockout_time_in_seconds = enable_lockout_time_in_seconds

    @property
    def enable_max_history(self):
        """Gets the enable_max_history of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_max_history of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_max_history

    @enable_max_history.setter
    def enable_max_history(self, enable_max_history):
        """Sets the enable_max_history of this OrganizationsettingsPasswordPolicy.


        :param enable_max_history: The enable_max_history of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_max_history = enable_max_history

    @property
    def enable_max_login_attempts(self):
        """Gets the enable_max_login_attempts of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_max_login_attempts of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_max_login_attempts

    @enable_max_login_attempts.setter
    def enable_max_login_attempts(self, enable_max_login_attempts):
        """Sets the enable_max_login_attempts of this OrganizationsettingsPasswordPolicy.


        :param enable_max_login_attempts: The enable_max_login_attempts of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_max_login_attempts = enable_max_login_attempts

    @property
    def enable_min_change_period_in_days(self):
        """Gets the enable_min_change_period_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_min_change_period_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_min_change_period_in_days

    @enable_min_change_period_in_days.setter
    def enable_min_change_period_in_days(self, enable_min_change_period_in_days):
        """Sets the enable_min_change_period_in_days of this OrganizationsettingsPasswordPolicy.


        :param enable_min_change_period_in_days: The enable_min_change_period_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_min_change_period_in_days = enable_min_change_period_in_days

    @property
    def enable_min_length(self):
        """Gets the enable_min_length of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_min_length of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_min_length

    @enable_min_length.setter
    def enable_min_length(self, enable_min_length):
        """Sets the enable_min_length of this OrganizationsettingsPasswordPolicy.


        :param enable_min_length: The enable_min_length of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_min_length = enable_min_length

    @property
    def enable_password_expiration_in_days(self):
        """Gets the enable_password_expiration_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The enable_password_expiration_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_password_expiration_in_days

    @enable_password_expiration_in_days.setter
    def enable_password_expiration_in_days(self, enable_password_expiration_in_days):
        """Sets the enable_password_expiration_in_days of this OrganizationsettingsPasswordPolicy.


        :param enable_password_expiration_in_days: The enable_password_expiration_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_password_expiration_in_days = enable_password_expiration_in_days

    @property
    def lockout_time_in_seconds(self):
        """Gets the lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._lockout_time_in_seconds

    @lockout_time_in_seconds.setter
    def lockout_time_in_seconds(self, lockout_time_in_seconds):
        """Sets the lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.


        :param lockout_time_in_seconds: The lockout_time_in_seconds of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """

        self._lockout_time_in_seconds = lockout_time_in_seconds

    @property
    def max_history(self):
        """Gets the max_history of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The max_history of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_history

    @max_history.setter
    def max_history(self, max_history):
        """Sets the max_history of this OrganizationsettingsPasswordPolicy.


        :param max_history: The max_history of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """
        if max_history is not None and max_history > 10:  # noqa: E501
            raise ValueError("Invalid value for `max_history`, must be a value less than or equal to `10`")  # noqa: E501
        if max_history is not None and max_history < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_history`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_history = max_history

    @property
    def max_login_attempts(self):
        """Gets the max_login_attempts of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The max_login_attempts of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_login_attempts

    @max_login_attempts.setter
    def max_login_attempts(self, max_login_attempts):
        """Sets the max_login_attempts of this OrganizationsettingsPasswordPolicy.


        :param max_login_attempts: The max_login_attempts of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """
        if max_login_attempts is not None and max_login_attempts < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_login_attempts`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_login_attempts = max_login_attempts

    @property
    def min_change_period_in_days(self):
        """Gets the min_change_period_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The min_change_period_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._min_change_period_in_days

    @min_change_period_in_days.setter
    def min_change_period_in_days(self, min_change_period_in_days):
        """Sets the min_change_period_in_days of this OrganizationsettingsPasswordPolicy.


        :param min_change_period_in_days: The min_change_period_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """

        self._min_change_period_in_days = min_change_period_in_days

    @property
    def min_length(self):
        """Gets the min_length of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The min_length of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this OrganizationsettingsPasswordPolicy.


        :param min_length: The min_length of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def needs_lowercase(self):
        """Gets the needs_lowercase of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The needs_lowercase of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._needs_lowercase

    @needs_lowercase.setter
    def needs_lowercase(self, needs_lowercase):
        """Sets the needs_lowercase of this OrganizationsettingsPasswordPolicy.


        :param needs_lowercase: The needs_lowercase of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._needs_lowercase = needs_lowercase

    @property
    def needs_numeric(self):
        """Gets the needs_numeric of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The needs_numeric of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._needs_numeric

    @needs_numeric.setter
    def needs_numeric(self, needs_numeric):
        """Sets the needs_numeric of this OrganizationsettingsPasswordPolicy.


        :param needs_numeric: The needs_numeric of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._needs_numeric = needs_numeric

    @property
    def needs_symbolic(self):
        """Gets the needs_symbolic of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The needs_symbolic of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._needs_symbolic

    @needs_symbolic.setter
    def needs_symbolic(self, needs_symbolic):
        """Sets the needs_symbolic of this OrganizationsettingsPasswordPolicy.


        :param needs_symbolic: The needs_symbolic of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._needs_symbolic = needs_symbolic

    @property
    def needs_uppercase(self):
        """Gets the needs_uppercase of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The needs_uppercase of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._needs_uppercase

    @needs_uppercase.setter
    def needs_uppercase(self, needs_uppercase):
        """Sets the needs_uppercase of this OrganizationsettingsPasswordPolicy.


        :param needs_uppercase: The needs_uppercase of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: bool
        """

        self._needs_uppercase = needs_uppercase

    @property
    def password_expiration_in_days(self):
        """Gets the password_expiration_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501


        :return: The password_expiration_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :rtype: int
        """
        return self._password_expiration_in_days

    @password_expiration_in_days.setter
    def password_expiration_in_days(self, password_expiration_in_days):
        """Sets the password_expiration_in_days of this OrganizationsettingsPasswordPolicy.


        :param password_expiration_in_days: The password_expiration_in_days of this OrganizationsettingsPasswordPolicy.  # noqa: E501
        :type: int
        """
        if password_expiration_in_days is not None and password_expiration_in_days < 1:  # noqa: E501
            raise ValueError("Invalid value for `password_expiration_in_days`, must be a value greater than or equal to `1`")  # noqa: E501

        self._password_expiration_in_days = password_expiration_in_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationsettingsPasswordPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationsettingsPasswordPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
