# coding: utf-8

"""
    JumpCloud APIs

    V1 & V2 versions of JumpCloud's API. The previous version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Command(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'command': 'str',
        'user': 'str',
        'systems': 'list[str]',
        'schedule': 'str',
        'files': 'list[str]',
        'tags': 'list[str]',
        'timeout': 'str'
    }

    attribute_map = {
        'name': 'name',
        'command': 'command',
        'user': 'user',
        'systems': 'systems',
        'schedule': 'schedule',
        'files': 'files',
        'tags': 'tags',
        'timeout': 'timeout'
    }

    def __init__(self, name=None, command=None, user=None, systems=None, schedule=None, files=None, tags=None, timeout=None):
        """
        Command - a model defined in Swagger
        """

        self._name = None
        self._command = None
        self._user = None
        self._systems = None
        self._schedule = None
        self._files = None
        self._tags = None
        self._timeout = None

        if name is not None:
          self.name = name
        self.command = command
        self.user = user
        if systems is not None:
          self.systems = systems
        if schedule is not None:
          self.schedule = schedule
        if files is not None:
          self.files = files
        if tags is not None:
          self.tags = tags
        if timeout is not None:
          self.timeout = timeout

    @property
    def name(self):
        """
        Gets the name of this Command.

        :return: The name of this Command.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Command.

        :param name: The name of this Command.
        :type: str
        """

        self._name = name

    @property
    def command(self):
        """
        Gets the command of this Command.
        The command to execute on the server.

        :return: The command of this Command.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this Command.
        The command to execute on the server.

        :param command: The command of this Command.
        :type: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def user(self):
        """
        Gets the user of this Command.
        The ID of the system user to run the command as.

        :return: The user of this Command.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Command.
        The ID of the system user to run the command as.

        :param user: The user of this Command.
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def systems(self):
        """
        Gets the systems of this Command.
        An array of system IDs to run the command on. Not available if you are using Groups.

        :return: The systems of this Command.
        :rtype: list[str]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """
        Sets the systems of this Command.
        An array of system IDs to run the command on. Not available if you are using Groups.

        :param systems: The systems of this Command.
        :type: list[str]
        """

        self._systems = systems

    @property
    def schedule(self):
        """
        Gets the schedule of this Command.
        A crontab that consists of: [ (seconds) (minutes) (hours) (days of month) (months) (weekdays) ] or [ immediate ]. If you send this as an empty string, it will run immediately. 

        :return: The schedule of this Command.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this Command.
        A crontab that consists of: [ (seconds) (minutes) (hours) (days of month) (months) (weekdays) ] or [ immediate ]. If you send this as an empty string, it will run immediately. 

        :param schedule: The schedule of this Command.
        :type: str
        """

        self._schedule = schedule

    @property
    def files(self):
        """
        Gets the files of this Command.
        An array of file IDs to include with the command.

        :return: The files of this Command.
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this Command.
        An array of file IDs to include with the command.

        :param files: The files of this Command.
        :type: list[str]
        """

        self._files = files

    @property
    def tags(self):
        """
        Gets the tags of this Command.
        An array of tag IDs to run the command on. Not available if you are using Groups.

        :return: The tags of this Command.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Command.
        An array of tag IDs to run the command on. Not available if you are using Groups.

        :param tags: The tags of this Command.
        :type: list[str]
        """

        self._tags = tags

    @property
    def timeout(self):
        """
        Gets the timeout of this Command.
        The time in seconds to allow the command to run for.

        :return: The timeout of this Command.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this Command.
        The time in seconds to allow the command to run for.

        :param timeout: The timeout of this Command.
        :type: str
        """

        self._timeout = timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Command):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
