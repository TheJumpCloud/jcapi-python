# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Commandresult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'str',
        'name': 'str',
        'system': 'str',
        'system_id': 'str',
        'organization': 'str',
        'workflow_id': 'str',
        'workflow_instance_id': 'str',
        'user': 'str',
        'sudo': 'bool',
        'files': 'list[str]',
        'request_time': 'int',
        'response_time': 'int',
        'response': 'CommandresultResponse',
        'id': 'str'
    }

    attribute_map = {
        'command': 'command',
        'name': 'name',
        'system': 'system',
        'system_id': 'systemId',
        'organization': 'organization',
        'workflow_id': 'workflowId',
        'workflow_instance_id': 'workflowInstanceId',
        'user': 'user',
        'sudo': 'sudo',
        'files': 'files',
        'request_time': 'requestTime',
        'response_time': 'responseTime',
        'response': 'response',
        'id': '_id'
    }

    def __init__(self, command=None, name=None, system=None, system_id=None, organization=None, workflow_id=None, workflow_instance_id=None, user=None, sudo=None, files=None, request_time=None, response_time=None, response=None, id=None):
        """
        Commandresult - a model defined in Swagger
        """

        self._command = None
        self._name = None
        self._system = None
        self._system_id = None
        self._organization = None
        self._workflow_id = None
        self._workflow_instance_id = None
        self._user = None
        self._sudo = None
        self._files = None
        self._request_time = None
        self._response_time = None
        self._response = None
        self._id = None

        if command is not None:
          self.command = command
        if name is not None:
          self.name = name
        if system is not None:
          self.system = system
        if system_id is not None:
          self.system_id = system_id
        if organization is not None:
          self.organization = organization
        if workflow_id is not None:
          self.workflow_id = workflow_id
        if workflow_instance_id is not None:
          self.workflow_instance_id = workflow_instance_id
        if user is not None:
          self.user = user
        if sudo is not None:
          self.sudo = sudo
        if files is not None:
          self.files = files
        if request_time is not None:
          self.request_time = request_time
        if response_time is not None:
          self.response_time = response_time
        if response is not None:
          self.response = response
        if id is not None:
          self.id = id

    @property
    def command(self):
        """
        Gets the command of this Commandresult.
        The command that was executed on the system.

        :return: The command of this Commandresult.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this Commandresult.
        The command that was executed on the system.

        :param command: The command of this Commandresult.
        :type: str
        """

        self._command = command

    @property
    def name(self):
        """
        Gets the name of this Commandresult.
        The name of the command.

        :return: The name of this Commandresult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Commandresult.
        The name of the command.

        :param name: The name of this Commandresult.
        :type: str
        """

        self._name = name

    @property
    def system(self):
        """
        Gets the system of this Commandresult.
        The name of the system the command was executed on.

        :return: The system of this Commandresult.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """
        Sets the system of this Commandresult.
        The name of the system the command was executed on.

        :param system: The system of this Commandresult.
        :type: str
        """

        self._system = system

    @property
    def system_id(self):
        """
        Gets the system_id of this Commandresult.
        The id of the system the command was executed on.

        :return: The system_id of this Commandresult.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """
        Sets the system_id of this Commandresult.
        The id of the system the command was executed on.

        :param system_id: The system_id of this Commandresult.
        :type: str
        """

        self._system_id = system_id

    @property
    def organization(self):
        """
        Gets the organization of this Commandresult.
        The ID of the organization.

        :return: The organization of this Commandresult.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this Commandresult.
        The ID of the organization.

        :param organization: The organization of this Commandresult.
        :type: str
        """

        self._organization = organization

    @property
    def workflow_id(self):
        """
        Gets the workflow_id of this Commandresult.

        :return: The workflow_id of this Commandresult.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """
        Sets the workflow_id of this Commandresult.

        :param workflow_id: The workflow_id of this Commandresult.
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def workflow_instance_id(self):
        """
        Gets the workflow_instance_id of this Commandresult.

        :return: The workflow_instance_id of this Commandresult.
        :rtype: str
        """
        return self._workflow_instance_id

    @workflow_instance_id.setter
    def workflow_instance_id(self, workflow_instance_id):
        """
        Sets the workflow_instance_id of this Commandresult.

        :param workflow_instance_id: The workflow_instance_id of this Commandresult.
        :type: str
        """

        self._workflow_instance_id = workflow_instance_id

    @property
    def user(self):
        """
        Gets the user of this Commandresult.
        The user the command ran as.

        :return: The user of this Commandresult.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Commandresult.
        The user the command ran as.

        :param user: The user of this Commandresult.
        :type: str
        """

        self._user = user

    @property
    def sudo(self):
        """
        Gets the sudo of this Commandresult.
        If the user had sudo rights

        :return: The sudo of this Commandresult.
        :rtype: bool
        """
        return self._sudo

    @sudo.setter
    def sudo(self, sudo):
        """
        Sets the sudo of this Commandresult.
        If the user had sudo rights

        :param sudo: The sudo of this Commandresult.
        :type: bool
        """

        self._sudo = sudo

    @property
    def files(self):
        """
        Gets the files of this Commandresult.
        An array of file ids that were included in the command

        :return: The files of this Commandresult.
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this Commandresult.
        An array of file ids that were included in the command

        :param files: The files of this Commandresult.
        :type: list[str]
        """

        self._files = files

    @property
    def request_time(self):
        """
        Gets the request_time of this Commandresult.
        The time that the command was sent.

        :return: The request_time of this Commandresult.
        :rtype: int
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """
        Sets the request_time of this Commandresult.
        The time that the command was sent.

        :param request_time: The request_time of this Commandresult.
        :type: int
        """

        self._request_time = request_time

    @property
    def response_time(self):
        """
        Gets the response_time of this Commandresult.
        The time that the command was completed.

        :return: The response_time of this Commandresult.
        :rtype: int
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """
        Sets the response_time of this Commandresult.
        The time that the command was completed.

        :param response_time: The response_time of this Commandresult.
        :type: int
        """

        self._response_time = response_time

    @property
    def response(self):
        """
        Gets the response of this Commandresult.

        :return: The response of this Commandresult.
        :rtype: CommandresultResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """
        Sets the response of this Commandresult.

        :param response: The response of this Commandresult.
        :type: CommandresultResponse
        """

        self._response = response

    @property
    def id(self):
        """
        Gets the id of this Commandresult.
        The ID of the command.

        :return: The id of this Commandresult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Commandresult.
        The ID of the command.

        :param id: The id of this Commandresult.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Commandresult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
