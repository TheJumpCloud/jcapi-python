# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V1 API. This set of endpoints allows JumpCloud customers to manage commands, systems, & system users.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created': 'str',
        'display_name': 'str',
        'has_stripe_customer_id': 'bool',
        'logo_url': 'str',
        'settings': 'object'
    }

    attribute_map = {
        'id': '_id',
        'created': 'created',
        'display_name': 'displayName',
        'has_stripe_customer_id': 'hasStripeCustomerId',
        'logo_url': 'logoUrl',
        'settings': 'settings'
    }

    def __init__(self, id=None, created=None, display_name=None, has_stripe_customer_id=None, logo_url=None, settings=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created = None
        self._display_name = None
        self._has_stripe_customer_id = None
        self._logo_url = None
        self._settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if display_name is not None:
            self.display_name = display_name
        if has_stripe_customer_id is not None:
            self.has_stripe_customer_id = has_stripe_customer_id
        if logo_url is not None:
            self.logo_url = logo_url
        if settings is not None:
            self.settings = settings

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Organization.  # noqa: E501


        :return: The created of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Organization.


        :param created: The created of this Organization.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def display_name(self):
        """Gets the display_name of this Organization.  # noqa: E501


        :return: The display_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Organization.


        :param display_name: The display_name of this Organization.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def has_stripe_customer_id(self):
        """Gets the has_stripe_customer_id of this Organization.  # noqa: E501


        :return: The has_stripe_customer_id of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._has_stripe_customer_id

    @has_stripe_customer_id.setter
    def has_stripe_customer_id(self, has_stripe_customer_id):
        """Sets the has_stripe_customer_id of this Organization.


        :param has_stripe_customer_id: The has_stripe_customer_id of this Organization.  # noqa: E501
        :type: bool
        """

        self._has_stripe_customer_id = has_stripe_customer_id

    @property
    def logo_url(self):
        """Gets the logo_url of this Organization.  # noqa: E501


        :return: The logo_url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Organization.


        :param logo_url: The logo_url of this Organization.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def settings(self):
        """Gets the settings of this Organization.  # noqa: E501


        :return: The settings of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Organization.


        :param settings: The settings of this Organization.  # noqa: E501
        :type: object
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
