# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from jcapiv2.api_client import ApiClient


class AppleMDMApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applemdms_delete(self, apple_mdm_id, content_type, accept, **kwargs):  # noqa: E501
        """Delete an Apple MDM  # noqa: E501

        Removes an Apple MDM configuration.  Warning: This is a destructive operation and will remove your Apple Push Certificates.  We will no longer be able to manage your devices and the only recovery option is to re-register all devices into MDM.  #### Sample Request ``` curl -X DELETE https://console.jumpcloud.com/api/v2/applemdms/{id} \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_delete(apple_mdm_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: AppleMDM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applemdms_delete_with_http_info(apple_mdm_id, content_type, accept, **kwargs)  # noqa: E501
        else:
            (data) = self.applemdms_delete_with_http_info(apple_mdm_id, content_type, accept, **kwargs)  # noqa: E501
            return data

    def applemdms_delete_with_http_info(self, apple_mdm_id, content_type, accept, **kwargs):  # noqa: E501
        """Delete an Apple MDM  # noqa: E501

        Removes an Apple MDM configuration.  Warning: This is a destructive operation and will remove your Apple Push Certificates.  We will no longer be able to manage your devices and the only recovery option is to re-register all devices into MDM.  #### Sample Request ``` curl -X DELETE https://console.jumpcloud.com/api/v2/applemdms/{id} \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_delete_with_http_info(apple_mdm_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: AppleMDM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apple_mdm_id', 'content_type', 'accept', 'x_org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applemdms_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apple_mdm_id' is set
        if ('apple_mdm_id' not in params or
                params['apple_mdm_id'] is None):
            raise ValueError("Missing the required parameter `apple_mdm_id` when calling `applemdms_delete`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `applemdms_delete`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `applemdms_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'apple_mdm_id' in params:
            path_params['apple_mdm_id'] = params['apple_mdm_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_org_id' in params:
            header_params['x-org-id'] = params['x_org_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/applemdms/{apple_mdm_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppleMDM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applemdms_list(self, content_type, accept, **kwargs):  # noqa: E501
        """List Apple MDMs  # noqa: E501

        Get a list of all Apple MDM configurations.  An empty topic indicates that a signed certificate from Apple has not been provided to the PUT endpoint yet.  Note: currently only one MDM configuration per organization is supported.  #### Sample Request ``` curl https://console.jumpcloud.com/api/v2/applemdms \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_list(content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: list[AppleMDM]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applemdms_list_with_http_info(content_type, accept, **kwargs)  # noqa: E501
        else:
            (data) = self.applemdms_list_with_http_info(content_type, accept, **kwargs)  # noqa: E501
            return data

    def applemdms_list_with_http_info(self, content_type, accept, **kwargs):  # noqa: E501
        """List Apple MDMs  # noqa: E501

        Get a list of all Apple MDM configurations.  An empty topic indicates that a signed certificate from Apple has not been provided to the PUT endpoint yet.  Note: currently only one MDM configuration per organization is supported.  #### Sample Request ``` curl https://console.jumpcloud.com/api/v2/applemdms \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_list_with_http_info(content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: list[AppleMDM]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'accept', 'x_org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applemdms_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `applemdms_list`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `applemdms_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_org_id' in params:
            header_params['x-org-id'] = params['x_org_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/applemdms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppleMDM]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applemdms_post(self, content_type, accept, **kwargs):  # noqa: E501
        """Create Apple MDM  # noqa: E501

        Creates an Apple MDM Enrollment for an organization. Only one enrollment per organization will be allowed.  Note that this is the first step in completly setting up an MDM Enrollment.  The user must supply the returned plist to Apple for signing, and then provide the certificate provided by Apple back into the PUT API.  #### Sample Request ```   curl -X POST https://console.jumpcloud.com/api/v2/organizations/{Organization_ID}/mdm \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' \\   -d '{}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_post(content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param str accept: (required)
        :param Body body:
        :param str x_org_id: 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applemdms_post_with_http_info(content_type, accept, **kwargs)  # noqa: E501
        else:
            (data) = self.applemdms_post_with_http_info(content_type, accept, **kwargs)  # noqa: E501
            return data

    def applemdms_post_with_http_info(self, content_type, accept, **kwargs):  # noqa: E501
        """Create Apple MDM  # noqa: E501

        Creates an Apple MDM Enrollment for an organization. Only one enrollment per organization will be allowed.  Note that this is the first step in completly setting up an MDM Enrollment.  The user must supply the returned plist to Apple for signing, and then provide the certificate provided by Apple back into the PUT API.  #### Sample Request ```   curl -X POST https://console.jumpcloud.com/api/v2/organizations/{Organization_ID}/mdm \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' \\   -d '{}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_post_with_http_info(content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param str accept: (required)
        :param Body body:
        :param str x_org_id: 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'accept', 'body', 'x_org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applemdms_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `applemdms_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `applemdms_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'x_org_id' in params:
            header_params['x-org-id'] = params['x_org_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/applemdms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applemdms_put(self, apple_mdm_id, content_type, accept, **kwargs):  # noqa: E501
        """Update an Apple MDM  # noqa: E501

        Updates an Apple MDM configuration.  This endpoint is used to supply JumpCloud with a signed certificate from Apple in order to finalize the setup and allow JumpCloud to manage your devices.  #### Sample Request ```   curl -X PUT https://console.jumpcloud.com/api/v2/applemdms/{ID} \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' \\   -d '{     \"name\": \"MDM name\",     \"appleSignedCert\": \"{CERTIFICATE}\"   }' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_put(apple_mdm_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param AppleMdmPatchInput body:
        :param str x_org_id: 
        :return: AppleMDM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applemdms_put_with_http_info(apple_mdm_id, content_type, accept, **kwargs)  # noqa: E501
        else:
            (data) = self.applemdms_put_with_http_info(apple_mdm_id, content_type, accept, **kwargs)  # noqa: E501
            return data

    def applemdms_put_with_http_info(self, apple_mdm_id, content_type, accept, **kwargs):  # noqa: E501
        """Update an Apple MDM  # noqa: E501

        Updates an Apple MDM configuration.  This endpoint is used to supply JumpCloud with a signed certificate from Apple in order to finalize the setup and allow JumpCloud to manage your devices.  #### Sample Request ```   curl -X PUT https://console.jumpcloud.com/api/v2/applemdms/{ID} \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' \\   -d '{     \"name\": \"MDM name\",     \"appleSignedCert\": \"{CERTIFICATE}\"   }' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applemdms_put_with_http_info(apple_mdm_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param AppleMdmPatchInput body:
        :param str x_org_id: 
        :return: AppleMDM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apple_mdm_id', 'content_type', 'accept', 'body', 'x_org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applemdms_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apple_mdm_id' is set
        if ('apple_mdm_id' not in params or
                params['apple_mdm_id'] is None):
            raise ValueError("Missing the required parameter `apple_mdm_id` when calling `applemdms_put`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `applemdms_put`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `applemdms_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'apple_mdm_id' in params:
            path_params['apple_mdm_id'] = params['apple_mdm_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_org_id' in params:
            header_params['x-org-id'] = params['x_org_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/applemdms/{apple_mdm_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppleMDM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollmentprofiles_get(self, apple_mdm_id, enrollment_profile_id, content_type, accept, **kwargs):  # noqa: E501
        """Get an Apple MDM Enrollment Profile  # noqa: E501

        Get an enrollment profile  Currently only requesting the mobileconfig is supported.  #### Sample Request  ``` curl https://console.jumpcloud.com/api/v2/applemdms/{APPLE_MDM_ID}/enrollmentprofiles/{ENROLLMENT_PROFILE_ID} \\   -H 'accept: application/x-apple-aspen-config' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollmentprofiles_get(apple_mdm_id, enrollment_profile_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str enrollment_profile_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: Mobileconfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollmentprofiles_get_with_http_info(apple_mdm_id, enrollment_profile_id, content_type, accept, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollmentprofiles_get_with_http_info(apple_mdm_id, enrollment_profile_id, content_type, accept, **kwargs)  # noqa: E501
            return data

    def enrollmentprofiles_get_with_http_info(self, apple_mdm_id, enrollment_profile_id, content_type, accept, **kwargs):  # noqa: E501
        """Get an Apple MDM Enrollment Profile  # noqa: E501

        Get an enrollment profile  Currently only requesting the mobileconfig is supported.  #### Sample Request  ``` curl https://console.jumpcloud.com/api/v2/applemdms/{APPLE_MDM_ID}/enrollmentprofiles/{ENROLLMENT_PROFILE_ID} \\   -H 'accept: application/x-apple-aspen-config' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollmentprofiles_get_with_http_info(apple_mdm_id, enrollment_profile_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str enrollment_profile_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: Mobileconfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apple_mdm_id', 'enrollment_profile_id', 'content_type', 'accept', 'x_org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollmentprofiles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apple_mdm_id' is set
        if ('apple_mdm_id' not in params or
                params['apple_mdm_id'] is None):
            raise ValueError("Missing the required parameter `apple_mdm_id` when calling `enrollmentprofiles_get`")  # noqa: E501
        # verify the required parameter 'enrollment_profile_id' is set
        if ('enrollment_profile_id' not in params or
                params['enrollment_profile_id'] is None):
            raise ValueError("Missing the required parameter `enrollment_profile_id` when calling `enrollmentprofiles_get`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `enrollmentprofiles_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `enrollmentprofiles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'apple_mdm_id' in params:
            path_params['apple_mdm_id'] = params['apple_mdm_id']  # noqa: E501
        if 'enrollment_profile_id' in params:
            path_params['enrollment_profile_id'] = params['enrollment_profile_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_org_id' in params:
            header_params['x-org-id'] = params['x_org_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/x-apple-aspen-config'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/applemdms/{apple_mdm_id}/enrollmentprofiles/{enrollment_profile_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mobileconfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollmentprofiles_list(self, apple_mdm_id, content_type, accept, **kwargs):  # noqa: E501
        """List Apple MDM Enrollment Profiles  # noqa: E501

        Get a list of enrollment profiles for an apple mdm.  Note: currently only one enrollment profile is supported.  #### Sample Request ``` curl https://console.jumpcloud.com/api/v2/applemdms/{APPLE_MDM_ID}/enrollmentprofiles \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollmentprofiles_list(apple_mdm_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: list[AppleMDM]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollmentprofiles_list_with_http_info(apple_mdm_id, content_type, accept, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollmentprofiles_list_with_http_info(apple_mdm_id, content_type, accept, **kwargs)  # noqa: E501
            return data

    def enrollmentprofiles_list_with_http_info(self, apple_mdm_id, content_type, accept, **kwargs):  # noqa: E501
        """List Apple MDM Enrollment Profiles  # noqa: E501

        Get a list of enrollment profiles for an apple mdm.  Note: currently only one enrollment profile is supported.  #### Sample Request ``` curl https://console.jumpcloud.com/api/v2/applemdms/{APPLE_MDM_ID}/enrollmentprofiles \\   -H 'accept: application/json' \\   -H 'content-type: application/json' \\   -H 'x-api-key: {API_KEY}' ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollmentprofiles_list_with_http_info(apple_mdm_id, content_type, accept, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apple_mdm_id: (required)
        :param str content_type: (required)
        :param str accept: (required)
        :param str x_org_id: 
        :return: list[AppleMDM]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apple_mdm_id', 'content_type', 'accept', 'x_org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollmentprofiles_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apple_mdm_id' is set
        if ('apple_mdm_id' not in params or
                params['apple_mdm_id'] is None):
            raise ValueError("Missing the required parameter `apple_mdm_id` when calling `enrollmentprofiles_list`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `enrollmentprofiles_list`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `enrollmentprofiles_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'apple_mdm_id' in params:
            path_params['apple_mdm_id'] = params['apple_mdm_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_org_id' in params:
            header_params['x-org-id'] = params['x_org_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/applemdms/{apple_mdm_id}/enrollmentprofiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppleMDM]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
