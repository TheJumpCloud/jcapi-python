# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsShadow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'expire': 'str',
        'flag': 'str',
        'hash_alg': 'str',
        'inactive': 'str',
        'last_change': 'str',
        'max': 'str',
        'min': 'str',
        'password_status': 'str',
        'system_id': 'str',
        'username': 'str',
        'warning': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'expire': 'expire',
        'flag': 'flag',
        'hash_alg': 'hash_alg',
        'inactive': 'inactive',
        'last_change': 'last_change',
        'max': 'max',
        'min': 'min	',
        'password_status': 'password_status',
        'system_id': 'system_id',
        'username': 'username',
        'warning': 'warning'
    }

    def __init__(self, collection_time=None, expire=None, flag=None, hash_alg=None, inactive=None, last_change=None, max=None, min=None, password_status=None, system_id=None, username=None, warning=None):  # noqa: E501
        """SystemInsightsShadow - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._expire = None
        self._flag = None
        self._hash_alg = None
        self._inactive = None
        self._last_change = None
        self._max = None
        self._min = None
        self._password_status = None
        self._system_id = None
        self._username = None
        self._warning = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if expire is not None:
            self.expire = expire
        if flag is not None:
            self.flag = flag
        if hash_alg is not None:
            self.hash_alg = hash_alg
        if inactive is not None:
            self.inactive = inactive
        if last_change is not None:
            self.last_change = last_change
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if password_status is not None:
            self.password_status = password_status
        if system_id is not None:
            self.system_id = system_id
        if username is not None:
            self.username = username
        if warning is not None:
            self.warning = warning

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsShadow.  # noqa: E501


        :return: The collection_time of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsShadow.


        :param collection_time: The collection_time of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def expire(self):
        """Gets the expire of this SystemInsightsShadow.  # noqa: E501


        :return: The expire of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this SystemInsightsShadow.


        :param expire: The expire of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._expire = expire

    @property
    def flag(self):
        """Gets the flag of this SystemInsightsShadow.  # noqa: E501


        :return: The flag of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this SystemInsightsShadow.


        :param flag: The flag of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._flag = flag

    @property
    def hash_alg(self):
        """Gets the hash_alg of this SystemInsightsShadow.  # noqa: E501


        :return: The hash_alg of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._hash_alg

    @hash_alg.setter
    def hash_alg(self, hash_alg):
        """Sets the hash_alg of this SystemInsightsShadow.


        :param hash_alg: The hash_alg of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._hash_alg = hash_alg

    @property
    def inactive(self):
        """Gets the inactive of this SystemInsightsShadow.  # noqa: E501


        :return: The inactive of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this SystemInsightsShadow.


        :param inactive: The inactive of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._inactive = inactive

    @property
    def last_change(self):
        """Gets the last_change of this SystemInsightsShadow.  # noqa: E501


        :return: The last_change of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this SystemInsightsShadow.


        :param last_change: The last_change of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._last_change = last_change

    @property
    def max(self):
        """Gets the max of this SystemInsightsShadow.  # noqa: E501


        :return: The max of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this SystemInsightsShadow.


        :param max: The max of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this SystemInsightsShadow.  # noqa: E501


        :return: The min of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this SystemInsightsShadow.


        :param min: The min of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._min = min

    @property
    def password_status(self):
        """Gets the password_status of this SystemInsightsShadow.  # noqa: E501


        :return: The password_status of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._password_status

    @password_status.setter
    def password_status(self, password_status):
        """Sets the password_status of this SystemInsightsShadow.


        :param password_status: The password_status of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._password_status = password_status

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsShadow.  # noqa: E501


        :return: The system_id of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsShadow.


        :param system_id: The system_id of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def username(self):
        """Gets the username of this SystemInsightsShadow.  # noqa: E501


        :return: The username of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SystemInsightsShadow.


        :param username: The username of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def warning(self):
        """Gets the warning of this SystemInsightsShadow.  # noqa: E501


        :return: The warning of this SystemInsightsShadow.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this SystemInsightsShadow.


        :param warning: The warning of this SystemInsightsShadow.  # noqa: E501
        :type: str
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsShadow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsShadow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
