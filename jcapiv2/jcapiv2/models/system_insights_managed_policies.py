# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsManagedPolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'domain': 'str',
        'manual': 'int',
        'name': 'str',
        'system_id': 'str',
        'username': 'str',
        'uuid': 'str',
        'value': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'domain': 'domain',
        'manual': 'manual',
        'name': 'name',
        'system_id': 'system_id',
        'username': 'username',
        'uuid': 'uuid',
        'value': 'value'
    }

    def __init__(self, collection_time=None, domain=None, manual=None, name=None, system_id=None, username=None, uuid=None, value=None):  # noqa: E501
        """SystemInsightsManagedPolicies - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._domain = None
        self._manual = None
        self._name = None
        self._system_id = None
        self._username = None
        self._uuid = None
        self._value = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if domain is not None:
            self.domain = domain
        if manual is not None:
            self.manual = manual
        if name is not None:
            self.name = name
        if system_id is not None:
            self.system_id = system_id
        if username is not None:
            self.username = username
        if uuid is not None:
            self.uuid = uuid
        if value is not None:
            self.value = value

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The collection_time of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsManagedPolicies.


        :param collection_time: The collection_time of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def domain(self):
        """Gets the domain of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The domain of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SystemInsightsManagedPolicies.


        :param domain: The domain of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def manual(self):
        """Gets the manual of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The manual of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: int
        """
        return self._manual

    @manual.setter
    def manual(self, manual):
        """Sets the manual of this SystemInsightsManagedPolicies.


        :param manual: The manual of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: int
        """

        self._manual = manual

    @property
    def name(self):
        """Gets the name of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The name of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInsightsManagedPolicies.


        :param name: The name of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The system_id of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsManagedPolicies.


        :param system_id: The system_id of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def username(self):
        """Gets the username of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The username of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SystemInsightsManagedPolicies.


        :param username: The username of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def uuid(self):
        """Gets the uuid of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The uuid of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SystemInsightsManagedPolicies.


        :param uuid: The uuid of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def value(self):
        """Gets the value of this SystemInsightsManagedPolicies.  # noqa: E501


        :return: The value of this SystemInsightsManagedPolicies.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SystemInsightsManagedPolicies.


        :param value: The value of this SystemInsightsManagedPolicies.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsManagedPolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsManagedPolicies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
