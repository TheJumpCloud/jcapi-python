# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsUsers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'gid': 'str',
        'uid_signed': 'str',
        'gid_signed': 'str',
        'username': 'str',
        'description': 'str',
        'directory': 'str',
        'shell': 'str',
        'uuid': 'str',
        'type': 'str',
        'jc_collection_time': 'str',
        'jc_system_id': 'str',
        'jc_organization_id': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'gid': 'gid',
        'uid_signed': 'uid_signed',
        'gid_signed': 'gid_signed',
        'username': 'username',
        'description': 'description',
        'directory': 'directory',
        'shell': 'shell',
        'uuid': 'uuid',
        'type': 'type',
        'jc_collection_time': 'jc_collection_time',
        'jc_system_id': 'jc_system_id',
        'jc_organization_id': 'jc_organization_id'
    }

    def __init__(self, uid=None, gid=None, uid_signed=None, gid_signed=None, username=None, description=None, directory=None, shell=None, uuid=None, type=None, jc_collection_time=None, jc_system_id=None, jc_organization_id=None):  # noqa: E501
        """SystemInsightsUsers - a model defined in Swagger"""  # noqa: E501

        self._uid = None
        self._gid = None
        self._uid_signed = None
        self._gid_signed = None
        self._username = None
        self._description = None
        self._directory = None
        self._shell = None
        self._uuid = None
        self._type = None
        self._jc_collection_time = None
        self._jc_system_id = None
        self._jc_organization_id = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if gid is not None:
            self.gid = gid
        if uid_signed is not None:
            self.uid_signed = uid_signed
        if gid_signed is not None:
            self.gid_signed = gid_signed
        if username is not None:
            self.username = username
        if description is not None:
            self.description = description
        if directory is not None:
            self.directory = directory
        if shell is not None:
            self.shell = shell
        if uuid is not None:
            self.uuid = uuid
        if type is not None:
            self.type = type
        if jc_collection_time is not None:
            self.jc_collection_time = jc_collection_time
        if jc_system_id is not None:
            self.jc_system_id = jc_system_id
        if jc_organization_id is not None:
            self.jc_organization_id = jc_organization_id

    @property
    def uid(self):
        """Gets the uid of this SystemInsightsUsers.  # noqa: E501


        :return: The uid of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SystemInsightsUsers.


        :param uid: The uid of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def gid(self):
        """Gets the gid of this SystemInsightsUsers.  # noqa: E501


        :return: The gid of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this SystemInsightsUsers.


        :param gid: The gid of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._gid = gid

    @property
    def uid_signed(self):
        """Gets the uid_signed of this SystemInsightsUsers.  # noqa: E501


        :return: The uid_signed of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._uid_signed

    @uid_signed.setter
    def uid_signed(self, uid_signed):
        """Sets the uid_signed of this SystemInsightsUsers.


        :param uid_signed: The uid_signed of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._uid_signed = uid_signed

    @property
    def gid_signed(self):
        """Gets the gid_signed of this SystemInsightsUsers.  # noqa: E501


        :return: The gid_signed of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._gid_signed

    @gid_signed.setter
    def gid_signed(self, gid_signed):
        """Sets the gid_signed of this SystemInsightsUsers.


        :param gid_signed: The gid_signed of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._gid_signed = gid_signed

    @property
    def username(self):
        """Gets the username of this SystemInsightsUsers.  # noqa: E501


        :return: The username of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SystemInsightsUsers.


        :param username: The username of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def description(self):
        """Gets the description of this SystemInsightsUsers.  # noqa: E501


        :return: The description of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemInsightsUsers.


        :param description: The description of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def directory(self):
        """Gets the directory of this SystemInsightsUsers.  # noqa: E501


        :return: The directory of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this SystemInsightsUsers.


        :param directory: The directory of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def shell(self):
        """Gets the shell of this SystemInsightsUsers.  # noqa: E501


        :return: The shell of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this SystemInsightsUsers.


        :param shell: The shell of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._shell = shell

    @property
    def uuid(self):
        """Gets the uuid of this SystemInsightsUsers.  # noqa: E501


        :return: The uuid of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SystemInsightsUsers.


        :param uuid: The uuid of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def type(self):
        """Gets the type of this SystemInsightsUsers.  # noqa: E501


        :return: The type of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInsightsUsers.


        :param type: The type of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def jc_collection_time(self):
        """Gets the jc_collection_time of this SystemInsightsUsers.  # noqa: E501


        :return: The jc_collection_time of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._jc_collection_time

    @jc_collection_time.setter
    def jc_collection_time(self, jc_collection_time):
        """Sets the jc_collection_time of this SystemInsightsUsers.


        :param jc_collection_time: The jc_collection_time of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._jc_collection_time = jc_collection_time

    @property
    def jc_system_id(self):
        """Gets the jc_system_id of this SystemInsightsUsers.  # noqa: E501


        :return: The jc_system_id of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._jc_system_id

    @jc_system_id.setter
    def jc_system_id(self, jc_system_id):
        """Sets the jc_system_id of this SystemInsightsUsers.


        :param jc_system_id: The jc_system_id of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._jc_system_id = jc_system_id

    @property
    def jc_organization_id(self):
        """Gets the jc_organization_id of this SystemInsightsUsers.  # noqa: E501


        :return: The jc_organization_id of this SystemInsightsUsers.  # noqa: E501
        :rtype: str
        """
        return self._jc_organization_id

    @jc_organization_id.setter
    def jc_organization_id(self, jc_organization_id):
        """Sets the jc_organization_id of this SystemInsightsUsers.


        :param jc_organization_id: The jc_organization_id of this SystemInsightsUsers.  # noqa: E501
        :type: str
        """

        self._jc_organization_id = jc_organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsUsers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
