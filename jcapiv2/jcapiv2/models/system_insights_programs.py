# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsPrograms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'identifying_number': 'str',
        'install_date': 'str',
        'install_location': 'str',
        'install_source': 'str',
        'language': 'str',
        'name': 'str',
        'publisher': 'str',
        'system_id': 'str',
        'uninstall_string': 'str',
        'version': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'identifying_number': 'identifying_number',
        'install_date': 'install_date',
        'install_location': 'install_location',
        'install_source': 'install_source',
        'language': 'language',
        'name': 'name',
        'publisher': 'publisher',
        'system_id': 'system_id',
        'uninstall_string': 'uninstall_string',
        'version': 'version'
    }

    def __init__(self, collection_time=None, identifying_number=None, install_date=None, install_location=None, install_source=None, language=None, name=None, publisher=None, system_id=None, uninstall_string=None, version=None):  # noqa: E501
        """SystemInsightsPrograms - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._identifying_number = None
        self._install_date = None
        self._install_location = None
        self._install_source = None
        self._language = None
        self._name = None
        self._publisher = None
        self._system_id = None
        self._uninstall_string = None
        self._version = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if identifying_number is not None:
            self.identifying_number = identifying_number
        if install_date is not None:
            self.install_date = install_date
        if install_location is not None:
            self.install_location = install_location
        if install_source is not None:
            self.install_source = install_source
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if publisher is not None:
            self.publisher = publisher
        if system_id is not None:
            self.system_id = system_id
        if uninstall_string is not None:
            self.uninstall_string = uninstall_string
        if version is not None:
            self.version = version

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsPrograms.  # noqa: E501


        :return: The collection_time of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsPrograms.


        :param collection_time: The collection_time of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def identifying_number(self):
        """Gets the identifying_number of this SystemInsightsPrograms.  # noqa: E501


        :return: The identifying_number of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._identifying_number

    @identifying_number.setter
    def identifying_number(self, identifying_number):
        """Sets the identifying_number of this SystemInsightsPrograms.


        :param identifying_number: The identifying_number of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._identifying_number = identifying_number

    @property
    def install_date(self):
        """Gets the install_date of this SystemInsightsPrograms.  # noqa: E501


        :return: The install_date of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this SystemInsightsPrograms.


        :param install_date: The install_date of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._install_date = install_date

    @property
    def install_location(self):
        """Gets the install_location of this SystemInsightsPrograms.  # noqa: E501


        :return: The install_location of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._install_location

    @install_location.setter
    def install_location(self, install_location):
        """Sets the install_location of this SystemInsightsPrograms.


        :param install_location: The install_location of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._install_location = install_location

    @property
    def install_source(self):
        """Gets the install_source of this SystemInsightsPrograms.  # noqa: E501


        :return: The install_source of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._install_source

    @install_source.setter
    def install_source(self, install_source):
        """Sets the install_source of this SystemInsightsPrograms.


        :param install_source: The install_source of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._install_source = install_source

    @property
    def language(self):
        """Gets the language of this SystemInsightsPrograms.  # noqa: E501


        :return: The language of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SystemInsightsPrograms.


        :param language: The language of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this SystemInsightsPrograms.  # noqa: E501


        :return: The name of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInsightsPrograms.


        :param name: The name of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def publisher(self):
        """Gets the publisher of this SystemInsightsPrograms.  # noqa: E501


        :return: The publisher of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this SystemInsightsPrograms.


        :param publisher: The publisher of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsPrograms.  # noqa: E501


        :return: The system_id of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsPrograms.


        :param system_id: The system_id of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def uninstall_string(self):
        """Gets the uninstall_string of this SystemInsightsPrograms.  # noqa: E501


        :return: The uninstall_string of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._uninstall_string

    @uninstall_string.setter
    def uninstall_string(self, uninstall_string):
        """Sets the uninstall_string of this SystemInsightsPrograms.


        :param uninstall_string: The uninstall_string of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._uninstall_string = uninstall_string

    @property
    def version(self):
        """Gets the version of this SystemInsightsPrograms.  # noqa: E501


        :return: The version of this SystemInsightsPrograms.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInsightsPrograms.


        :param version: The version of this SystemInsightsPrograms.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsPrograms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsPrograms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
