# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsBattery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amgerage': 'int',
        'charged': 'int',
        'charging': 'int',
        'collection_time': 'str',
        'condition': 'str',
        'current_capacity': 'int',
        'cycle_count': 'int',
        'designed_capacity': 'int',
        'health': 'str',
        'manufacture_date': 'int',
        'manufacturer': 'str',
        'max_capacity': 'int',
        'minutes_to_full_charge': 'int',
        'minutes_until_empty': 'int',
        'model': 'str',
        'percent_remaining': 'int',
        'serial_number': 'str',
        'state': 'str',
        'system_id': 'str',
        'voltage': 'int'
    }

    attribute_map = {
        'amgerage': 'amgerage',
        'charged': 'charged',
        'charging': 'charging',
        'collection_time': 'collection_time',
        'condition': 'condition',
        'current_capacity': 'current_capacity',
        'cycle_count': 'cycle_count',
        'designed_capacity': 'designed_capacity',
        'health': 'health',
        'manufacture_date': 'manufacture_date',
        'manufacturer': 'manufacturer',
        'max_capacity': 'max_capacity',
        'minutes_to_full_charge': 'minutes_to_full_charge',
        'minutes_until_empty': 'minutes_until_empty',
        'model': 'model',
        'percent_remaining': 'percent_remaining',
        'serial_number': 'serial_number',
        'state': 'state',
        'system_id': 'system_id',
        'voltage': 'voltage'
    }

    def __init__(self, amgerage=None, charged=None, charging=None, collection_time=None, condition=None, current_capacity=None, cycle_count=None, designed_capacity=None, health=None, manufacture_date=None, manufacturer=None, max_capacity=None, minutes_to_full_charge=None, minutes_until_empty=None, model=None, percent_remaining=None, serial_number=None, state=None, system_id=None, voltage=None):  # noqa: E501
        """SystemInsightsBattery - a model defined in Swagger"""  # noqa: E501

        self._amgerage = None
        self._charged = None
        self._charging = None
        self._collection_time = None
        self._condition = None
        self._current_capacity = None
        self._cycle_count = None
        self._designed_capacity = None
        self._health = None
        self._manufacture_date = None
        self._manufacturer = None
        self._max_capacity = None
        self._minutes_to_full_charge = None
        self._minutes_until_empty = None
        self._model = None
        self._percent_remaining = None
        self._serial_number = None
        self._state = None
        self._system_id = None
        self._voltage = None
        self.discriminator = None

        if amgerage is not None:
            self.amgerage = amgerage
        if charged is not None:
            self.charged = charged
        if charging is not None:
            self.charging = charging
        if collection_time is not None:
            self.collection_time = collection_time
        if condition is not None:
            self.condition = condition
        if current_capacity is not None:
            self.current_capacity = current_capacity
        if cycle_count is not None:
            self.cycle_count = cycle_count
        if designed_capacity is not None:
            self.designed_capacity = designed_capacity
        if health is not None:
            self.health = health
        if manufacture_date is not None:
            self.manufacture_date = manufacture_date
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if max_capacity is not None:
            self.max_capacity = max_capacity
        if minutes_to_full_charge is not None:
            self.minutes_to_full_charge = minutes_to_full_charge
        if minutes_until_empty is not None:
            self.minutes_until_empty = minutes_until_empty
        if model is not None:
            self.model = model
        if percent_remaining is not None:
            self.percent_remaining = percent_remaining
        if serial_number is not None:
            self.serial_number = serial_number
        if state is not None:
            self.state = state
        if system_id is not None:
            self.system_id = system_id
        if voltage is not None:
            self.voltage = voltage

    @property
    def amgerage(self):
        """Gets the amgerage of this SystemInsightsBattery.  # noqa: E501


        :return: The amgerage of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._amgerage

    @amgerage.setter
    def amgerage(self, amgerage):
        """Sets the amgerage of this SystemInsightsBattery.


        :param amgerage: The amgerage of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._amgerage = amgerage

    @property
    def charged(self):
        """Gets the charged of this SystemInsightsBattery.  # noqa: E501


        :return: The charged of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._charged

    @charged.setter
    def charged(self, charged):
        """Sets the charged of this SystemInsightsBattery.


        :param charged: The charged of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._charged = charged

    @property
    def charging(self):
        """Gets the charging of this SystemInsightsBattery.  # noqa: E501


        :return: The charging of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._charging

    @charging.setter
    def charging(self, charging):
        """Sets the charging of this SystemInsightsBattery.


        :param charging: The charging of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._charging = charging

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsBattery.  # noqa: E501


        :return: The collection_time of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsBattery.


        :param collection_time: The collection_time of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def condition(self):
        """Gets the condition of this SystemInsightsBattery.  # noqa: E501


        :return: The condition of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this SystemInsightsBattery.


        :param condition: The condition of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def current_capacity(self):
        """Gets the current_capacity of this SystemInsightsBattery.  # noqa: E501


        :return: The current_capacity of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._current_capacity

    @current_capacity.setter
    def current_capacity(self, current_capacity):
        """Sets the current_capacity of this SystemInsightsBattery.


        :param current_capacity: The current_capacity of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._current_capacity = current_capacity

    @property
    def cycle_count(self):
        """Gets the cycle_count of this SystemInsightsBattery.  # noqa: E501


        :return: The cycle_count of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this SystemInsightsBattery.


        :param cycle_count: The cycle_count of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._cycle_count = cycle_count

    @property
    def designed_capacity(self):
        """Gets the designed_capacity of this SystemInsightsBattery.  # noqa: E501


        :return: The designed_capacity of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._designed_capacity

    @designed_capacity.setter
    def designed_capacity(self, designed_capacity):
        """Sets the designed_capacity of this SystemInsightsBattery.


        :param designed_capacity: The designed_capacity of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._designed_capacity = designed_capacity

    @property
    def health(self):
        """Gets the health of this SystemInsightsBattery.  # noqa: E501


        :return: The health of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this SystemInsightsBattery.


        :param health: The health of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def manufacture_date(self):
        """Gets the manufacture_date of this SystemInsightsBattery.  # noqa: E501


        :return: The manufacture_date of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._manufacture_date

    @manufacture_date.setter
    def manufacture_date(self, manufacture_date):
        """Sets the manufacture_date of this SystemInsightsBattery.


        :param manufacture_date: The manufacture_date of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._manufacture_date = manufacture_date

    @property
    def manufacturer(self):
        """Gets the manufacturer of this SystemInsightsBattery.  # noqa: E501


        :return: The manufacturer of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this SystemInsightsBattery.


        :param manufacturer: The manufacturer of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def max_capacity(self):
        """Gets the max_capacity of this SystemInsightsBattery.  # noqa: E501


        :return: The max_capacity of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this SystemInsightsBattery.


        :param max_capacity: The max_capacity of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._max_capacity = max_capacity

    @property
    def minutes_to_full_charge(self):
        """Gets the minutes_to_full_charge of this SystemInsightsBattery.  # noqa: E501


        :return: The minutes_to_full_charge of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._minutes_to_full_charge

    @minutes_to_full_charge.setter
    def minutes_to_full_charge(self, minutes_to_full_charge):
        """Sets the minutes_to_full_charge of this SystemInsightsBattery.


        :param minutes_to_full_charge: The minutes_to_full_charge of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._minutes_to_full_charge = minutes_to_full_charge

    @property
    def minutes_until_empty(self):
        """Gets the minutes_until_empty of this SystemInsightsBattery.  # noqa: E501


        :return: The minutes_until_empty of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._minutes_until_empty

    @minutes_until_empty.setter
    def minutes_until_empty(self, minutes_until_empty):
        """Sets the minutes_until_empty of this SystemInsightsBattery.


        :param minutes_until_empty: The minutes_until_empty of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._minutes_until_empty = minutes_until_empty

    @property
    def model(self):
        """Gets the model of this SystemInsightsBattery.  # noqa: E501


        :return: The model of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SystemInsightsBattery.


        :param model: The model of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def percent_remaining(self):
        """Gets the percent_remaining of this SystemInsightsBattery.  # noqa: E501


        :return: The percent_remaining of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._percent_remaining

    @percent_remaining.setter
    def percent_remaining(self, percent_remaining):
        """Sets the percent_remaining of this SystemInsightsBattery.


        :param percent_remaining: The percent_remaining of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._percent_remaining = percent_remaining

    @property
    def serial_number(self):
        """Gets the serial_number of this SystemInsightsBattery.  # noqa: E501


        :return: The serial_number of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SystemInsightsBattery.


        :param serial_number: The serial_number of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def state(self):
        """Gets the state of this SystemInsightsBattery.  # noqa: E501


        :return: The state of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SystemInsightsBattery.


        :param state: The state of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsBattery.  # noqa: E501


        :return: The system_id of this SystemInsightsBattery.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsBattery.


        :param system_id: The system_id of this SystemInsightsBattery.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def voltage(self):
        """Gets the voltage of this SystemInsightsBattery.  # noqa: E501


        :return: The voltage of this SystemInsightsBattery.  # noqa: E501
        :rtype: int
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this SystemInsightsBattery.


        :param voltage: The voltage of this SystemInsightsBattery.  # noqa: E501
        :type: int
        """

        self._voltage = voltage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsBattery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsBattery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
