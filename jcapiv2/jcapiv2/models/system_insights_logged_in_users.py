# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsLoggedInUsers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'host': 'str',
        'pid': 'int',
        'system_id': 'str',
        'time': 'int',
        'tty': 'str',
        'type': 'str',
        'user': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'host': 'host',
        'pid': 'pid',
        'system_id': 'system_id',
        'time': 'time',
        'tty': 'tty',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, collection_time=None, host=None, pid=None, system_id=None, time=None, tty=None, type=None, user=None):  # noqa: E501
        """SystemInsightsLoggedInUsers - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._host = None
        self._pid = None
        self._system_id = None
        self._time = None
        self._tty = None
        self._type = None
        self._user = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if host is not None:
            self.host = host
        if pid is not None:
            self.pid = pid
        if system_id is not None:
            self.system_id = system_id
        if time is not None:
            self.time = time
        if tty is not None:
            self.tty = tty
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The collection_time of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsLoggedInUsers.


        :param collection_time: The collection_time of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def host(self):
        """Gets the host of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The host of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SystemInsightsLoggedInUsers.


        :param host: The host of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def pid(self):
        """Gets the pid of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The pid of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this SystemInsightsLoggedInUsers.


        :param pid: The pid of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The system_id of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsLoggedInUsers.


        :param system_id: The system_id of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def time(self):
        """Gets the time of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The time of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SystemInsightsLoggedInUsers.


        :param time: The time of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def tty(self):
        """Gets the tty of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The tty of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: str
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this SystemInsightsLoggedInUsers.


        :param tty: The tty of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: str
        """

        self._tty = tty

    @property
    def type(self):
        """Gets the type of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The type of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInsightsLoggedInUsers.


        :param type: The type of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this SystemInsightsLoggedInUsers.  # noqa: E501


        :return: The user of this SystemInsightsLoggedInUsers.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SystemInsightsLoggedInUsers.


        :param user: The user of this SystemInsightsLoggedInUsers.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsLoggedInUsers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsLoggedInUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
