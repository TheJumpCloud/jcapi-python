# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsSystemInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'uuid': 'str',
        'cpu_type': 'str',
        'cpu_subtype': 'str',
        'cpu_brand': 'str',
        'cpu_physical_cores': 'int',
        'cpu_logical_cores': 'int',
        'cpu_microcode': 'str',
        'physical_memory': 'str',
        'hardware_vendor': 'str',
        'hardware_model': 'str',
        'hardware_version': 'str',
        'hardware_serial': 'str',
        'computer_name': 'str',
        'local_hostname': 'str',
        'jc_collection_time': 'str',
        'jc_system_id': 'str'
    }

    attribute_map = {
        'hostname': 'hostname',
        'uuid': 'uuid',
        'cpu_type': 'cpu_type',
        'cpu_subtype': 'cpu_subtype',
        'cpu_brand': 'cpu_brand',
        'cpu_physical_cores': 'cpu_physical_cores',
        'cpu_logical_cores': 'cpu_logical_cores',
        'cpu_microcode': 'cpu_microcode',
        'physical_memory': 'physical_memory',
        'hardware_vendor': 'hardware_vendor',
        'hardware_model': 'hardware_model',
        'hardware_version': 'hardware_version',
        'hardware_serial': 'hardware_serial',
        'computer_name': 'computer_name',
        'local_hostname': 'local_hostname',
        'jc_collection_time': 'jc_collection_time',
        'jc_system_id': 'jc_system_id'
    }

    def __init__(self, hostname=None, uuid=None, cpu_type=None, cpu_subtype=None, cpu_brand=None, cpu_physical_cores=None, cpu_logical_cores=None, cpu_microcode=None, physical_memory=None, hardware_vendor=None, hardware_model=None, hardware_version=None, hardware_serial=None, computer_name=None, local_hostname=None, jc_collection_time=None, jc_system_id=None):  # noqa: E501
        """SystemInsightsSystemInfo - a model defined in Swagger"""  # noqa: E501

        self._hostname = None
        self._uuid = None
        self._cpu_type = None
        self._cpu_subtype = None
        self._cpu_brand = None
        self._cpu_physical_cores = None
        self._cpu_logical_cores = None
        self._cpu_microcode = None
        self._physical_memory = None
        self._hardware_vendor = None
        self._hardware_model = None
        self._hardware_version = None
        self._hardware_serial = None
        self._computer_name = None
        self._local_hostname = None
        self._jc_collection_time = None
        self._jc_system_id = None
        self.discriminator = None

        if hostname is not None:
            self.hostname = hostname
        if uuid is not None:
            self.uuid = uuid
        if cpu_type is not None:
            self.cpu_type = cpu_type
        if cpu_subtype is not None:
            self.cpu_subtype = cpu_subtype
        if cpu_brand is not None:
            self.cpu_brand = cpu_brand
        if cpu_physical_cores is not None:
            self.cpu_physical_cores = cpu_physical_cores
        if cpu_logical_cores is not None:
            self.cpu_logical_cores = cpu_logical_cores
        if cpu_microcode is not None:
            self.cpu_microcode = cpu_microcode
        if physical_memory is not None:
            self.physical_memory = physical_memory
        if hardware_vendor is not None:
            self.hardware_vendor = hardware_vendor
        if hardware_model is not None:
            self.hardware_model = hardware_model
        if hardware_version is not None:
            self.hardware_version = hardware_version
        if hardware_serial is not None:
            self.hardware_serial = hardware_serial
        if computer_name is not None:
            self.computer_name = computer_name
        if local_hostname is not None:
            self.local_hostname = local_hostname
        if jc_collection_time is not None:
            self.jc_collection_time = jc_collection_time
        if jc_system_id is not None:
            self.jc_system_id = jc_system_id

    @property
    def hostname(self):
        """Gets the hostname of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The hostname of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SystemInsightsSystemInfo.


        :param hostname: The hostname of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def uuid(self):
        """Gets the uuid of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The uuid of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SystemInsightsSystemInfo.


        :param uuid: The uuid of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def cpu_type(self):
        """Gets the cpu_type of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The cpu_type of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_type

    @cpu_type.setter
    def cpu_type(self, cpu_type):
        """Sets the cpu_type of this SystemInsightsSystemInfo.


        :param cpu_type: The cpu_type of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._cpu_type = cpu_type

    @property
    def cpu_subtype(self):
        """Gets the cpu_subtype of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The cpu_subtype of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_subtype

    @cpu_subtype.setter
    def cpu_subtype(self, cpu_subtype):
        """Sets the cpu_subtype of this SystemInsightsSystemInfo.


        :param cpu_subtype: The cpu_subtype of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._cpu_subtype = cpu_subtype

    @property
    def cpu_brand(self):
        """Gets the cpu_brand of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The cpu_brand of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_brand

    @cpu_brand.setter
    def cpu_brand(self, cpu_brand):
        """Sets the cpu_brand of this SystemInsightsSystemInfo.


        :param cpu_brand: The cpu_brand of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._cpu_brand = cpu_brand

    @property
    def cpu_physical_cores(self):
        """Gets the cpu_physical_cores of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The cpu_physical_cores of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._cpu_physical_cores

    @cpu_physical_cores.setter
    def cpu_physical_cores(self, cpu_physical_cores):
        """Sets the cpu_physical_cores of this SystemInsightsSystemInfo.


        :param cpu_physical_cores: The cpu_physical_cores of this SystemInsightsSystemInfo.  # noqa: E501
        :type: int
        """

        self._cpu_physical_cores = cpu_physical_cores

    @property
    def cpu_logical_cores(self):
        """Gets the cpu_logical_cores of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The cpu_logical_cores of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._cpu_logical_cores

    @cpu_logical_cores.setter
    def cpu_logical_cores(self, cpu_logical_cores):
        """Sets the cpu_logical_cores of this SystemInsightsSystemInfo.


        :param cpu_logical_cores: The cpu_logical_cores of this SystemInsightsSystemInfo.  # noqa: E501
        :type: int
        """

        self._cpu_logical_cores = cpu_logical_cores

    @property
    def cpu_microcode(self):
        """Gets the cpu_microcode of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The cpu_microcode of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_microcode

    @cpu_microcode.setter
    def cpu_microcode(self, cpu_microcode):
        """Sets the cpu_microcode of this SystemInsightsSystemInfo.


        :param cpu_microcode: The cpu_microcode of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._cpu_microcode = cpu_microcode

    @property
    def physical_memory(self):
        """Gets the physical_memory of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The physical_memory of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._physical_memory

    @physical_memory.setter
    def physical_memory(self, physical_memory):
        """Sets the physical_memory of this SystemInsightsSystemInfo.


        :param physical_memory: The physical_memory of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._physical_memory = physical_memory

    @property
    def hardware_vendor(self):
        """Gets the hardware_vendor of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The hardware_vendor of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hardware_vendor

    @hardware_vendor.setter
    def hardware_vendor(self, hardware_vendor):
        """Sets the hardware_vendor of this SystemInsightsSystemInfo.


        :param hardware_vendor: The hardware_vendor of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._hardware_vendor = hardware_vendor

    @property
    def hardware_model(self):
        """Gets the hardware_model of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The hardware_model of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hardware_model

    @hardware_model.setter
    def hardware_model(self, hardware_model):
        """Sets the hardware_model of this SystemInsightsSystemInfo.


        :param hardware_model: The hardware_model of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._hardware_model = hardware_model

    @property
    def hardware_version(self):
        """Gets the hardware_version of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The hardware_version of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hardware_version

    @hardware_version.setter
    def hardware_version(self, hardware_version):
        """Sets the hardware_version of this SystemInsightsSystemInfo.


        :param hardware_version: The hardware_version of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._hardware_version = hardware_version

    @property
    def hardware_serial(self):
        """Gets the hardware_serial of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The hardware_serial of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hardware_serial

    @hardware_serial.setter
    def hardware_serial(self, hardware_serial):
        """Sets the hardware_serial of this SystemInsightsSystemInfo.


        :param hardware_serial: The hardware_serial of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._hardware_serial = hardware_serial

    @property
    def computer_name(self):
        """Gets the computer_name of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The computer_name of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._computer_name

    @computer_name.setter
    def computer_name(self, computer_name):
        """Sets the computer_name of this SystemInsightsSystemInfo.


        :param computer_name: The computer_name of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._computer_name = computer_name

    @property
    def local_hostname(self):
        """Gets the local_hostname of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The local_hostname of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._local_hostname

    @local_hostname.setter
    def local_hostname(self, local_hostname):
        """Sets the local_hostname of this SystemInsightsSystemInfo.


        :param local_hostname: The local_hostname of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._local_hostname = local_hostname

    @property
    def jc_collection_time(self):
        """Gets the jc_collection_time of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The jc_collection_time of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._jc_collection_time

    @jc_collection_time.setter
    def jc_collection_time(self, jc_collection_time):
        """Sets the jc_collection_time of this SystemInsightsSystemInfo.


        :param jc_collection_time: The jc_collection_time of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._jc_collection_time = jc_collection_time

    @property
    def jc_system_id(self):
        """Gets the jc_system_id of this SystemInsightsSystemInfo.  # noqa: E501


        :return: The jc_system_id of this SystemInsightsSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._jc_system_id

    @jc_system_id.setter
    def jc_system_id(self, jc_system_id):
        """Sets the jc_system_id of this SystemInsightsSystemInfo.


        :param jc_system_id: The jc_system_id of this SystemInsightsSystemInfo.  # noqa: E501
        :type: str
        """

        self._jc_system_id = jc_system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsSystemInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsSystemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
