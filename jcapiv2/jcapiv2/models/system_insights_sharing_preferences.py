# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsSharingPreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bluetooth_sharing': 'int',
        'collection_time': 'str',
        'content_caching': 'int',
        'disc_sharing': 'int',
        'file_sharing': 'int',
        'internet_sharing': 'int',
        'printer_sharing': 'int',
        'remote_apple_events': 'int',
        'remote_login': 'int',
        'remote_management': 'int',
        'screen_sharing': 'int',
        'system_id': 'str'
    }

    attribute_map = {
        'bluetooth_sharing': 'bluetooth_sharing',
        'collection_time': 'collection_time',
        'content_caching': 'content_caching',
        'disc_sharing': 'disc_sharing',
        'file_sharing': 'file_sharing',
        'internet_sharing': 'internet_sharing',
        'printer_sharing': 'printer_sharing',
        'remote_apple_events': 'remote_apple_events',
        'remote_login': 'remote_login',
        'remote_management': 'remote_management',
        'screen_sharing': 'screen_sharing',
        'system_id': 'system_id'
    }

    def __init__(self, bluetooth_sharing=None, collection_time=None, content_caching=None, disc_sharing=None, file_sharing=None, internet_sharing=None, printer_sharing=None, remote_apple_events=None, remote_login=None, remote_management=None, screen_sharing=None, system_id=None):  # noqa: E501
        """SystemInsightsSharingPreferences - a model defined in Swagger"""  # noqa: E501

        self._bluetooth_sharing = None
        self._collection_time = None
        self._content_caching = None
        self._disc_sharing = None
        self._file_sharing = None
        self._internet_sharing = None
        self._printer_sharing = None
        self._remote_apple_events = None
        self._remote_login = None
        self._remote_management = None
        self._screen_sharing = None
        self._system_id = None
        self.discriminator = None

        if bluetooth_sharing is not None:
            self.bluetooth_sharing = bluetooth_sharing
        if collection_time is not None:
            self.collection_time = collection_time
        if content_caching is not None:
            self.content_caching = content_caching
        if disc_sharing is not None:
            self.disc_sharing = disc_sharing
        if file_sharing is not None:
            self.file_sharing = file_sharing
        if internet_sharing is not None:
            self.internet_sharing = internet_sharing
        if printer_sharing is not None:
            self.printer_sharing = printer_sharing
        if remote_apple_events is not None:
            self.remote_apple_events = remote_apple_events
        if remote_login is not None:
            self.remote_login = remote_login
        if remote_management is not None:
            self.remote_management = remote_management
        if screen_sharing is not None:
            self.screen_sharing = screen_sharing
        if system_id is not None:
            self.system_id = system_id

    @property
    def bluetooth_sharing(self):
        """Gets the bluetooth_sharing of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The bluetooth_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._bluetooth_sharing

    @bluetooth_sharing.setter
    def bluetooth_sharing(self, bluetooth_sharing):
        """Sets the bluetooth_sharing of this SystemInsightsSharingPreferences.


        :param bluetooth_sharing: The bluetooth_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._bluetooth_sharing = bluetooth_sharing

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The collection_time of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsSharingPreferences.


        :param collection_time: The collection_time of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def content_caching(self):
        """Gets the content_caching of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The content_caching of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._content_caching

    @content_caching.setter
    def content_caching(self, content_caching):
        """Sets the content_caching of this SystemInsightsSharingPreferences.


        :param content_caching: The content_caching of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._content_caching = content_caching

    @property
    def disc_sharing(self):
        """Gets the disc_sharing of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The disc_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._disc_sharing

    @disc_sharing.setter
    def disc_sharing(self, disc_sharing):
        """Sets the disc_sharing of this SystemInsightsSharingPreferences.


        :param disc_sharing: The disc_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._disc_sharing = disc_sharing

    @property
    def file_sharing(self):
        """Gets the file_sharing of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The file_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._file_sharing

    @file_sharing.setter
    def file_sharing(self, file_sharing):
        """Sets the file_sharing of this SystemInsightsSharingPreferences.


        :param file_sharing: The file_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._file_sharing = file_sharing

    @property
    def internet_sharing(self):
        """Gets the internet_sharing of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The internet_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._internet_sharing

    @internet_sharing.setter
    def internet_sharing(self, internet_sharing):
        """Sets the internet_sharing of this SystemInsightsSharingPreferences.


        :param internet_sharing: The internet_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._internet_sharing = internet_sharing

    @property
    def printer_sharing(self):
        """Gets the printer_sharing of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The printer_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._printer_sharing

    @printer_sharing.setter
    def printer_sharing(self, printer_sharing):
        """Sets the printer_sharing of this SystemInsightsSharingPreferences.


        :param printer_sharing: The printer_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._printer_sharing = printer_sharing

    @property
    def remote_apple_events(self):
        """Gets the remote_apple_events of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The remote_apple_events of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._remote_apple_events

    @remote_apple_events.setter
    def remote_apple_events(self, remote_apple_events):
        """Sets the remote_apple_events of this SystemInsightsSharingPreferences.


        :param remote_apple_events: The remote_apple_events of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._remote_apple_events = remote_apple_events

    @property
    def remote_login(self):
        """Gets the remote_login of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The remote_login of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._remote_login

    @remote_login.setter
    def remote_login(self, remote_login):
        """Sets the remote_login of this SystemInsightsSharingPreferences.


        :param remote_login: The remote_login of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._remote_login = remote_login

    @property
    def remote_management(self):
        """Gets the remote_management of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The remote_management of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._remote_management

    @remote_management.setter
    def remote_management(self, remote_management):
        """Sets the remote_management of this SystemInsightsSharingPreferences.


        :param remote_management: The remote_management of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._remote_management = remote_management

    @property
    def screen_sharing(self):
        """Gets the screen_sharing of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The screen_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: int
        """
        return self._screen_sharing

    @screen_sharing.setter
    def screen_sharing(self, screen_sharing):
        """Sets the screen_sharing of this SystemInsightsSharingPreferences.


        :param screen_sharing: The screen_sharing of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: int
        """

        self._screen_sharing = screen_sharing

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsSharingPreferences.  # noqa: E501


        :return: The system_id of this SystemInsightsSharingPreferences.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsSharingPreferences.


        :param system_id: The system_id of this SystemInsightsSharingPreferences.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsSharingPreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsSharingPreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
