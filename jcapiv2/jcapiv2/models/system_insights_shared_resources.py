# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsSharedResources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_maximum': 'int',
        'collection_time': 'str',
        'description': 'str',
        'install_date': 'str',
        'maximum_allowed': 'int',
        'name': 'str',
        'path': 'str',
        'status': 'str',
        'system_id': 'str',
        'type': 'int'
    }

    attribute_map = {
        'allow_maximum': 'allow_maximum',
        'collection_time': 'collection_time',
        'description': 'description',
        'install_date': 'install_date',
        'maximum_allowed': 'maximum_allowed',
        'name': 'name',
        'path': 'path',
        'status': 'status',
        'system_id': 'system_id',
        'type': 'type'
    }

    def __init__(self, allow_maximum=None, collection_time=None, description=None, install_date=None, maximum_allowed=None, name=None, path=None, status=None, system_id=None, type=None):  # noqa: E501
        """SystemInsightsSharedResources - a model defined in Swagger"""  # noqa: E501

        self._allow_maximum = None
        self._collection_time = None
        self._description = None
        self._install_date = None
        self._maximum_allowed = None
        self._name = None
        self._path = None
        self._status = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if allow_maximum is not None:
            self.allow_maximum = allow_maximum
        if collection_time is not None:
            self.collection_time = collection_time
        if description is not None:
            self.description = description
        if install_date is not None:
            self.install_date = install_date
        if maximum_allowed is not None:
            self.maximum_allowed = maximum_allowed
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if status is not None:
            self.status = status
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def allow_maximum(self):
        """Gets the allow_maximum of this SystemInsightsSharedResources.  # noqa: E501


        :return: The allow_maximum of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: int
        """
        return self._allow_maximum

    @allow_maximum.setter
    def allow_maximum(self, allow_maximum):
        """Sets the allow_maximum of this SystemInsightsSharedResources.


        :param allow_maximum: The allow_maximum of this SystemInsightsSharedResources.  # noqa: E501
        :type: int
        """

        self._allow_maximum = allow_maximum

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsSharedResources.  # noqa: E501


        :return: The collection_time of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsSharedResources.


        :param collection_time: The collection_time of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def description(self):
        """Gets the description of this SystemInsightsSharedResources.  # noqa: E501


        :return: The description of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemInsightsSharedResources.


        :param description: The description of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def install_date(self):
        """Gets the install_date of this SystemInsightsSharedResources.  # noqa: E501


        :return: The install_date of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this SystemInsightsSharedResources.


        :param install_date: The install_date of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._install_date = install_date

    @property
    def maximum_allowed(self):
        """Gets the maximum_allowed of this SystemInsightsSharedResources.  # noqa: E501


        :return: The maximum_allowed of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: int
        """
        return self._maximum_allowed

    @maximum_allowed.setter
    def maximum_allowed(self, maximum_allowed):
        """Sets the maximum_allowed of this SystemInsightsSharedResources.


        :param maximum_allowed: The maximum_allowed of this SystemInsightsSharedResources.  # noqa: E501
        :type: int
        """

        self._maximum_allowed = maximum_allowed

    @property
    def name(self):
        """Gets the name of this SystemInsightsSharedResources.  # noqa: E501


        :return: The name of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInsightsSharedResources.


        :param name: The name of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this SystemInsightsSharedResources.  # noqa: E501


        :return: The path of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SystemInsightsSharedResources.


        :param path: The path of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def status(self):
        """Gets the status of this SystemInsightsSharedResources.  # noqa: E501


        :return: The status of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SystemInsightsSharedResources.


        :param status: The status of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsSharedResources.  # noqa: E501


        :return: The system_id of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsSharedResources.


        :param system_id: The system_id of this SystemInsightsSharedResources.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this SystemInsightsSharedResources.  # noqa: E501


        :return: The type of this SystemInsightsSharedResources.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInsightsSharedResources.


        :param type: The type of this SystemInsightsSharedResources.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsSharedResources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsSharedResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
