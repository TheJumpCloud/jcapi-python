# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsDiskInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'description': 'str',
        'disk_index': 'int',
        'disk_size': 'str',
        'hardware_model': 'str',
        'id': 'str',
        'manufacturer': 'str',
        'name': 'str',
        'partitions': 'int',
        'pnp_device_id': 'str',
        'serial': 'str',
        'system_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'description': 'description',
        'disk_index': 'disk_index',
        'disk_size': 'disk_size',
        'hardware_model': 'hardware_model',
        'id': 'id',
        'manufacturer': 'manufacturer',
        'name': 'name',
        'partitions': 'partitions',
        'pnp_device_id': 'pnp_device_id',
        'serial': 'serial',
        'system_id': 'system_id',
        'type': 'type'
    }

    def __init__(self, collection_time=None, description=None, disk_index=None, disk_size=None, hardware_model=None, id=None, manufacturer=None, name=None, partitions=None, pnp_device_id=None, serial=None, system_id=None, type=None):  # noqa: E501
        """SystemInsightsDiskInfo - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._description = None
        self._disk_index = None
        self._disk_size = None
        self._hardware_model = None
        self._id = None
        self._manufacturer = None
        self._name = None
        self._partitions = None
        self._pnp_device_id = None
        self._serial = None
        self._system_id = None
        self._type = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if description is not None:
            self.description = description
        if disk_index is not None:
            self.disk_index = disk_index
        if disk_size is not None:
            self.disk_size = disk_size
        if hardware_model is not None:
            self.hardware_model = hardware_model
        if id is not None:
            self.id = id
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if name is not None:
            self.name = name
        if partitions is not None:
            self.partitions = partitions
        if pnp_device_id is not None:
            self.pnp_device_id = pnp_device_id
        if serial is not None:
            self.serial = serial
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The collection_time of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsDiskInfo.


        :param collection_time: The collection_time of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def description(self):
        """Gets the description of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The description of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemInsightsDiskInfo.


        :param description: The description of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disk_index(self):
        """Gets the disk_index of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The disk_index of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: int
        """
        return self._disk_index

    @disk_index.setter
    def disk_index(self, disk_index):
        """Sets the disk_index of this SystemInsightsDiskInfo.


        :param disk_index: The disk_index of this SystemInsightsDiskInfo.  # noqa: E501
        :type: int
        """

        self._disk_index = disk_index

    @property
    def disk_size(self):
        """Gets the disk_size of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The disk_size of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this SystemInsightsDiskInfo.


        :param disk_size: The disk_size of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._disk_size = disk_size

    @property
    def hardware_model(self):
        """Gets the hardware_model of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The hardware_model of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._hardware_model

    @hardware_model.setter
    def hardware_model(self, hardware_model):
        """Sets the hardware_model of this SystemInsightsDiskInfo.


        :param hardware_model: The hardware_model of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._hardware_model = hardware_model

    @property
    def id(self):
        """Gets the id of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The id of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemInsightsDiskInfo.


        :param id: The id of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The manufacturer of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this SystemInsightsDiskInfo.


        :param manufacturer: The manufacturer of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The name of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInsightsDiskInfo.


        :param name: The name of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partitions(self):
        """Gets the partitions of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The partitions of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: int
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this SystemInsightsDiskInfo.


        :param partitions: The partitions of this SystemInsightsDiskInfo.  # noqa: E501
        :type: int
        """

        self._partitions = partitions

    @property
    def pnp_device_id(self):
        """Gets the pnp_device_id of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The pnp_device_id of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._pnp_device_id

    @pnp_device_id.setter
    def pnp_device_id(self, pnp_device_id):
        """Sets the pnp_device_id of this SystemInsightsDiskInfo.


        :param pnp_device_id: The pnp_device_id of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._pnp_device_id = pnp_device_id

    @property
    def serial(self):
        """Gets the serial of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The serial of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this SystemInsightsDiskInfo.


        :param serial: The serial of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The system_id of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsDiskInfo.


        :param system_id: The system_id of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this SystemInsightsDiskInfo.  # noqa: E501


        :return: The type of this SystemInsightsDiskInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInsightsDiskInfo.


        :param type: The type of this SystemInsightsDiskInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsDiskInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsDiskInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
