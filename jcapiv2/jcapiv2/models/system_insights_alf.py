# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsAlf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_signed_enabled': 'int',
        'collection_time': 'str',
        'firewall_unload': 'int',
        'global_state': 'int',
        'logging_enabled': 'int',
        'logging_option': 'int',
        'stealth_enabled': 'int',
        'system_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'allow_signed_enabled': 'allow_signed_enabled	',
        'collection_time': 'collection_time',
        'firewall_unload': 'firewall_unload',
        'global_state': 'global_state',
        'logging_enabled': 'logging_enabled',
        'logging_option': 'logging_option',
        'stealth_enabled': 'stealth_enabled',
        'system_id': 'system_id',
        'version': 'version'
    }

    def __init__(self, allow_signed_enabled=None, collection_time=None, firewall_unload=None, global_state=None, logging_enabled=None, logging_option=None, stealth_enabled=None, system_id=None, version=None):  # noqa: E501
        """SystemInsightsAlf - a model defined in Swagger"""  # noqa: E501

        self._allow_signed_enabled = None
        self._collection_time = None
        self._firewall_unload = None
        self._global_state = None
        self._logging_enabled = None
        self._logging_option = None
        self._stealth_enabled = None
        self._system_id = None
        self._version = None
        self.discriminator = None

        if allow_signed_enabled is not None:
            self.allow_signed_enabled = allow_signed_enabled
        if collection_time is not None:
            self.collection_time = collection_time
        if firewall_unload is not None:
            self.firewall_unload = firewall_unload
        if global_state is not None:
            self.global_state = global_state
        if logging_enabled is not None:
            self.logging_enabled = logging_enabled
        if logging_option is not None:
            self.logging_option = logging_option
        if stealth_enabled is not None:
            self.stealth_enabled = stealth_enabled
        if system_id is not None:
            self.system_id = system_id
        if version is not None:
            self.version = version

    @property
    def allow_signed_enabled(self):
        """Gets the allow_signed_enabled of this SystemInsightsAlf.  # noqa: E501


        :return: The allow_signed_enabled of this SystemInsightsAlf.  # noqa: E501
        :rtype: int
        """
        return self._allow_signed_enabled

    @allow_signed_enabled.setter
    def allow_signed_enabled(self, allow_signed_enabled):
        """Sets the allow_signed_enabled of this SystemInsightsAlf.


        :param allow_signed_enabled: The allow_signed_enabled of this SystemInsightsAlf.  # noqa: E501
        :type: int
        """

        self._allow_signed_enabled = allow_signed_enabled

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsAlf.  # noqa: E501


        :return: The collection_time of this SystemInsightsAlf.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsAlf.


        :param collection_time: The collection_time of this SystemInsightsAlf.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def firewall_unload(self):
        """Gets the firewall_unload of this SystemInsightsAlf.  # noqa: E501


        :return: The firewall_unload of this SystemInsightsAlf.  # noqa: E501
        :rtype: int
        """
        return self._firewall_unload

    @firewall_unload.setter
    def firewall_unload(self, firewall_unload):
        """Sets the firewall_unload of this SystemInsightsAlf.


        :param firewall_unload: The firewall_unload of this SystemInsightsAlf.  # noqa: E501
        :type: int
        """

        self._firewall_unload = firewall_unload

    @property
    def global_state(self):
        """Gets the global_state of this SystemInsightsAlf.  # noqa: E501


        :return: The global_state of this SystemInsightsAlf.  # noqa: E501
        :rtype: int
        """
        return self._global_state

    @global_state.setter
    def global_state(self, global_state):
        """Sets the global_state of this SystemInsightsAlf.


        :param global_state: The global_state of this SystemInsightsAlf.  # noqa: E501
        :type: int
        """

        self._global_state = global_state

    @property
    def logging_enabled(self):
        """Gets the logging_enabled of this SystemInsightsAlf.  # noqa: E501


        :return: The logging_enabled of this SystemInsightsAlf.  # noqa: E501
        :rtype: int
        """
        return self._logging_enabled

    @logging_enabled.setter
    def logging_enabled(self, logging_enabled):
        """Sets the logging_enabled of this SystemInsightsAlf.


        :param logging_enabled: The logging_enabled of this SystemInsightsAlf.  # noqa: E501
        :type: int
        """

        self._logging_enabled = logging_enabled

    @property
    def logging_option(self):
        """Gets the logging_option of this SystemInsightsAlf.  # noqa: E501


        :return: The logging_option of this SystemInsightsAlf.  # noqa: E501
        :rtype: int
        """
        return self._logging_option

    @logging_option.setter
    def logging_option(self, logging_option):
        """Sets the logging_option of this SystemInsightsAlf.


        :param logging_option: The logging_option of this SystemInsightsAlf.  # noqa: E501
        :type: int
        """

        self._logging_option = logging_option

    @property
    def stealth_enabled(self):
        """Gets the stealth_enabled of this SystemInsightsAlf.  # noqa: E501


        :return: The stealth_enabled of this SystemInsightsAlf.  # noqa: E501
        :rtype: int
        """
        return self._stealth_enabled

    @stealth_enabled.setter
    def stealth_enabled(self, stealth_enabled):
        """Sets the stealth_enabled of this SystemInsightsAlf.


        :param stealth_enabled: The stealth_enabled of this SystemInsightsAlf.  # noqa: E501
        :type: int
        """

        self._stealth_enabled = stealth_enabled

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsAlf.  # noqa: E501


        :return: The system_id of this SystemInsightsAlf.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsAlf.


        :param system_id: The system_id of this SystemInsightsAlf.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def version(self):
        """Gets the version of this SystemInsightsAlf.  # noqa: E501


        :return: The version of this SystemInsightsAlf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInsightsAlf.


        :param version: The version of this SystemInsightsAlf.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsAlf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsAlf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
