# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsOsVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build': 'str',
        'codename': 'str',
        'collection_time': 'str',
        'install_date': 'str',
        'major': 'int',
        'minor': 'int',
        'name': 'str',
        'patch': 'int',
        'platform': 'str',
        'platform_like': 'str',
        'system_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'build': 'build',
        'codename': 'codename',
        'collection_time': 'collection_time',
        'install_date': 'install_date',
        'major': 'major',
        'minor': 'minor',
        'name': 'name',
        'patch': 'patch',
        'platform': 'platform',
        'platform_like': 'platform_like',
        'system_id': 'system_id',
        'version': 'version'
    }

    def __init__(self, build=None, codename=None, collection_time=None, install_date=None, major=None, minor=None, name=None, patch=None, platform=None, platform_like=None, system_id=None, version=None):  # noqa: E501
        """SystemInsightsOsVersion - a model defined in Swagger"""  # noqa: E501

        self._build = None
        self._codename = None
        self._collection_time = None
        self._install_date = None
        self._major = None
        self._minor = None
        self._name = None
        self._patch = None
        self._platform = None
        self._platform_like = None
        self._system_id = None
        self._version = None
        self.discriminator = None

        if build is not None:
            self.build = build
        if codename is not None:
            self.codename = codename
        if collection_time is not None:
            self.collection_time = collection_time
        if install_date is not None:
            self.install_date = install_date
        if major is not None:
            self.major = major
        if minor is not None:
            self.minor = minor
        if name is not None:
            self.name = name
        if patch is not None:
            self.patch = patch
        if platform is not None:
            self.platform = platform
        if platform_like is not None:
            self.platform_like = platform_like
        if system_id is not None:
            self.system_id = system_id
        if version is not None:
            self.version = version

    @property
    def build(self):
        """Gets the build of this SystemInsightsOsVersion.  # noqa: E501


        :return: The build of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SystemInsightsOsVersion.


        :param build: The build of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def codename(self):
        """Gets the codename of this SystemInsightsOsVersion.  # noqa: E501


        :return: The codename of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this SystemInsightsOsVersion.


        :param codename: The codename of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._codename = codename

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsOsVersion.  # noqa: E501


        :return: The collection_time of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsOsVersion.


        :param collection_time: The collection_time of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def install_date(self):
        """Gets the install_date of this SystemInsightsOsVersion.  # noqa: E501


        :return: The install_date of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this SystemInsightsOsVersion.


        :param install_date: The install_date of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._install_date = install_date

    @property
    def major(self):
        """Gets the major of this SystemInsightsOsVersion.  # noqa: E501


        :return: The major of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this SystemInsightsOsVersion.


        :param major: The major of this SystemInsightsOsVersion.  # noqa: E501
        :type: int
        """

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this SystemInsightsOsVersion.  # noqa: E501


        :return: The minor of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this SystemInsightsOsVersion.


        :param minor: The minor of this SystemInsightsOsVersion.  # noqa: E501
        :type: int
        """

        self._minor = minor

    @property
    def name(self):
        """Gets the name of this SystemInsightsOsVersion.  # noqa: E501


        :return: The name of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInsightsOsVersion.


        :param name: The name of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def patch(self):
        """Gets the patch of this SystemInsightsOsVersion.  # noqa: E501


        :return: The patch of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this SystemInsightsOsVersion.


        :param patch: The patch of this SystemInsightsOsVersion.  # noqa: E501
        :type: int
        """

        self._patch = patch

    @property
    def platform(self):
        """Gets the platform of this SystemInsightsOsVersion.  # noqa: E501


        :return: The platform of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SystemInsightsOsVersion.


        :param platform: The platform of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def platform_like(self):
        """Gets the platform_like of this SystemInsightsOsVersion.  # noqa: E501


        :return: The platform_like of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._platform_like

    @platform_like.setter
    def platform_like(self, platform_like):
        """Sets the platform_like of this SystemInsightsOsVersion.


        :param platform_like: The platform_like of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._platform_like = platform_like

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsOsVersion.  # noqa: E501


        :return: The system_id of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsOsVersion.


        :param system_id: The system_id of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def version(self):
        """Gets the version of this SystemInsightsOsVersion.  # noqa: E501


        :return: The version of this SystemInsightsOsVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInsightsOsVersion.


        :param version: The version of this SystemInsightsOsVersion.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsOsVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsOsVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
