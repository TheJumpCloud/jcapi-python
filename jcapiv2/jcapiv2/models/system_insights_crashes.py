# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsCrashes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'crash_path': 'str',
        'crashed_thread': 'str',
        '_datetime': 'str',
        'exception_codes': 'str',
        'exception_notes': 'str',
        'exception_type': 'str',
        'identifier': 'str',
        'parent': 'str',
        'path': 'str',
        'pid': 'str',
        'registers': 'str',
        'responsible': 'str',
        'stack_trace': 'str',
        'system_id': 'str',
        'type': 'str',
        'uid': 'int',
        'version': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'crash_path': 'crash_path',
        'crashed_thread': 'crashed_thread',
        '_datetime': 'datetime',
        'exception_codes': 'exception_codes',
        'exception_notes': 'exception_notes',
        'exception_type': 'exception_type',
        'identifier': 'identifier',
        'parent': 'parent',
        'path': 'path',
        'pid': 'pid',
        'registers': 'registers',
        'responsible': 'responsible',
        'stack_trace': 'stack_trace',
        'system_id': 'system_id',
        'type': 'type',
        'uid': 'uid',
        'version': 'version'
    }

    def __init__(self, collection_time=None, crash_path=None, crashed_thread=None, _datetime=None, exception_codes=None, exception_notes=None, exception_type=None, identifier=None, parent=None, path=None, pid=None, registers=None, responsible=None, stack_trace=None, system_id=None, type=None, uid=None, version=None):  # noqa: E501
        """SystemInsightsCrashes - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._crash_path = None
        self._crashed_thread = None
        self.__datetime = None
        self._exception_codes = None
        self._exception_notes = None
        self._exception_type = None
        self._identifier = None
        self._parent = None
        self._path = None
        self._pid = None
        self._registers = None
        self._responsible = None
        self._stack_trace = None
        self._system_id = None
        self._type = None
        self._uid = None
        self._version = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if crash_path is not None:
            self.crash_path = crash_path
        if crashed_thread is not None:
            self.crashed_thread = crashed_thread
        if _datetime is not None:
            self._datetime = _datetime
        if exception_codes is not None:
            self.exception_codes = exception_codes
        if exception_notes is not None:
            self.exception_notes = exception_notes
        if exception_type is not None:
            self.exception_type = exception_type
        if identifier is not None:
            self.identifier = identifier
        if parent is not None:
            self.parent = parent
        if path is not None:
            self.path = path
        if pid is not None:
            self.pid = pid
        if registers is not None:
            self.registers = registers
        if responsible is not None:
            self.responsible = responsible
        if stack_trace is not None:
            self.stack_trace = stack_trace
        if system_id is not None:
            self.system_id = system_id
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid
        if version is not None:
            self.version = version

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsCrashes.  # noqa: E501


        :return: The collection_time of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsCrashes.


        :param collection_time: The collection_time of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def crash_path(self):
        """Gets the crash_path of this SystemInsightsCrashes.  # noqa: E501


        :return: The crash_path of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._crash_path

    @crash_path.setter
    def crash_path(self, crash_path):
        """Sets the crash_path of this SystemInsightsCrashes.


        :param crash_path: The crash_path of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._crash_path = crash_path

    @property
    def crashed_thread(self):
        """Gets the crashed_thread of this SystemInsightsCrashes.  # noqa: E501


        :return: The crashed_thread of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._crashed_thread

    @crashed_thread.setter
    def crashed_thread(self, crashed_thread):
        """Sets the crashed_thread of this SystemInsightsCrashes.


        :param crashed_thread: The crashed_thread of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._crashed_thread = crashed_thread

    @property
    def _datetime(self):
        """Gets the _datetime of this SystemInsightsCrashes.  # noqa: E501


        :return: The _datetime of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this SystemInsightsCrashes.


        :param _datetime: The _datetime of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self.__datetime = _datetime

    @property
    def exception_codes(self):
        """Gets the exception_codes of this SystemInsightsCrashes.  # noqa: E501


        :return: The exception_codes of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._exception_codes

    @exception_codes.setter
    def exception_codes(self, exception_codes):
        """Sets the exception_codes of this SystemInsightsCrashes.


        :param exception_codes: The exception_codes of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._exception_codes = exception_codes

    @property
    def exception_notes(self):
        """Gets the exception_notes of this SystemInsightsCrashes.  # noqa: E501


        :return: The exception_notes of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._exception_notes

    @exception_notes.setter
    def exception_notes(self, exception_notes):
        """Sets the exception_notes of this SystemInsightsCrashes.


        :param exception_notes: The exception_notes of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._exception_notes = exception_notes

    @property
    def exception_type(self):
        """Gets the exception_type of this SystemInsightsCrashes.  # noqa: E501


        :return: The exception_type of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this SystemInsightsCrashes.


        :param exception_type: The exception_type of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._exception_type = exception_type

    @property
    def identifier(self):
        """Gets the identifier of this SystemInsightsCrashes.  # noqa: E501


        :return: The identifier of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SystemInsightsCrashes.


        :param identifier: The identifier of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def parent(self):
        """Gets the parent of this SystemInsightsCrashes.  # noqa: E501


        :return: The parent of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this SystemInsightsCrashes.


        :param parent: The parent of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def path(self):
        """Gets the path of this SystemInsightsCrashes.  # noqa: E501


        :return: The path of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SystemInsightsCrashes.


        :param path: The path of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def pid(self):
        """Gets the pid of this SystemInsightsCrashes.  # noqa: E501


        :return: The pid of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this SystemInsightsCrashes.


        :param pid: The pid of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def registers(self):
        """Gets the registers of this SystemInsightsCrashes.  # noqa: E501


        :return: The registers of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._registers

    @registers.setter
    def registers(self, registers):
        """Sets the registers of this SystemInsightsCrashes.


        :param registers: The registers of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._registers = registers

    @property
    def responsible(self):
        """Gets the responsible of this SystemInsightsCrashes.  # noqa: E501


        :return: The responsible of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._responsible

    @responsible.setter
    def responsible(self, responsible):
        """Sets the responsible of this SystemInsightsCrashes.


        :param responsible: The responsible of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._responsible = responsible

    @property
    def stack_trace(self):
        """Gets the stack_trace of this SystemInsightsCrashes.  # noqa: E501


        :return: The stack_trace of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this SystemInsightsCrashes.


        :param stack_trace: The stack_trace of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._stack_trace = stack_trace

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsCrashes.  # noqa: E501


        :return: The system_id of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsCrashes.


        :param system_id: The system_id of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def type(self):
        """Gets the type of this SystemInsightsCrashes.  # noqa: E501


        :return: The type of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInsightsCrashes.


        :param type: The type of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this SystemInsightsCrashes.  # noqa: E501


        :return: The uid of this SystemInsightsCrashes.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SystemInsightsCrashes.


        :param uid: The uid of this SystemInsightsCrashes.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def version(self):
        """Gets the version of this SystemInsightsCrashes.  # noqa: E501


        :return: The version of this SystemInsightsCrashes.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInsightsCrashes.


        :param version: The version of this SystemInsightsCrashes.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsCrashes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsCrashes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
