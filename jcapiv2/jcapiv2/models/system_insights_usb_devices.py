# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsUsbDevices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'collection_time': 'str',
        'model': 'str',
        'model_id': 'str',
        'protocol': 'str',
        'removable': 'int',
        'serial': 'str',
        'subclass': 'str',
        'system_id': 'str',
        'usb_address': 'int',
        'usb_port': 'int',
        'vendor': 'str',
        'vendor_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'collection_time': 'collection_time',
        'model': 'model',
        'model_id': 'model_id',
        'protocol': 'protocol',
        'removable': 'removable',
        'serial': 'serial',
        'subclass': 'subclass',
        'system_id': 'system_id',
        'usb_address': 'usb_address',
        'usb_port': 'usb_port',
        'vendor': 'vendor',
        'vendor_id': 'vendor_id',
        'version': 'version'
    }

    def __init__(self, _class=None, collection_time=None, model=None, model_id=None, protocol=None, removable=None, serial=None, subclass=None, system_id=None, usb_address=None, usb_port=None, vendor=None, vendor_id=None, version=None):  # noqa: E501
        """SystemInsightsUsbDevices - a model defined in Swagger"""  # noqa: E501

        self.__class = None
        self._collection_time = None
        self._model = None
        self._model_id = None
        self._protocol = None
        self._removable = None
        self._serial = None
        self._subclass = None
        self._system_id = None
        self._usb_address = None
        self._usb_port = None
        self._vendor = None
        self._vendor_id = None
        self._version = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if collection_time is not None:
            self.collection_time = collection_time
        if model is not None:
            self.model = model
        if model_id is not None:
            self.model_id = model_id
        if protocol is not None:
            self.protocol = protocol
        if removable is not None:
            self.removable = removable
        if serial is not None:
            self.serial = serial
        if subclass is not None:
            self.subclass = subclass
        if system_id is not None:
            self.system_id = system_id
        if usb_address is not None:
            self.usb_address = usb_address
        if usb_port is not None:
            self.usb_port = usb_port
        if vendor is not None:
            self.vendor = vendor
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if version is not None:
            self.version = version

    @property
    def _class(self):
        """Gets the _class of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The _class of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this SystemInsightsUsbDevices.


        :param _class: The _class of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The collection_time of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsUsbDevices.


        :param collection_time: The collection_time of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def model(self):
        """Gets the model of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The model of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SystemInsightsUsbDevices.


        :param model: The model of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def model_id(self):
        """Gets the model_id of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The model_id of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this SystemInsightsUsbDevices.


        :param model_id: The model_id of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def protocol(self):
        """Gets the protocol of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The protocol of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SystemInsightsUsbDevices.


        :param protocol: The protocol of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def removable(self):
        """Gets the removable of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The removable of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: int
        """
        return self._removable

    @removable.setter
    def removable(self, removable):
        """Sets the removable of this SystemInsightsUsbDevices.


        :param removable: The removable of this SystemInsightsUsbDevices.  # noqa: E501
        :type: int
        """

        self._removable = removable

    @property
    def serial(self):
        """Gets the serial of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The serial of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this SystemInsightsUsbDevices.


        :param serial: The serial of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def subclass(self):
        """Gets the subclass of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The subclass of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._subclass

    @subclass.setter
    def subclass(self, subclass):
        """Sets the subclass of this SystemInsightsUsbDevices.


        :param subclass: The subclass of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._subclass = subclass

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The system_id of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsUsbDevices.


        :param system_id: The system_id of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def usb_address(self):
        """Gets the usb_address of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The usb_address of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: int
        """
        return self._usb_address

    @usb_address.setter
    def usb_address(self, usb_address):
        """Sets the usb_address of this SystemInsightsUsbDevices.


        :param usb_address: The usb_address of this SystemInsightsUsbDevices.  # noqa: E501
        :type: int
        """

        self._usb_address = usb_address

    @property
    def usb_port(self):
        """Gets the usb_port of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The usb_port of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: int
        """
        return self._usb_port

    @usb_port.setter
    def usb_port(self, usb_port):
        """Sets the usb_port of this SystemInsightsUsbDevices.


        :param usb_port: The usb_port of this SystemInsightsUsbDevices.  # noqa: E501
        :type: int
        """

        self._usb_port = usb_port

    @property
    def vendor(self):
        """Gets the vendor of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The vendor of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this SystemInsightsUsbDevices.


        :param vendor: The vendor of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendor_id(self):
        """Gets the vendor_id of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The vendor_id of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this SystemInsightsUsbDevices.


        :param vendor_id: The vendor_id of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def version(self):
        """Gets the version of this SystemInsightsUsbDevices.  # noqa: E501


        :return: The version of this SystemInsightsUsbDevices.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInsightsUsbDevices.


        :param version: The version of this SystemInsightsUsbDevices.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsUsbDevices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsUsbDevices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
