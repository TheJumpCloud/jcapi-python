# coding: utf-8

"""
    JumpCloud APIs

     JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInsightsBitlockerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time': 'str',
        'conversion_status': 'int',
        'devide_id': 'str',
        'drive_letter': 'str',
        'encryption_method': 'str',
        'persistent_volume_id': 'str',
        'protection_status': 'int',
        'system_id': 'str'
    }

    attribute_map = {
        'collection_time': 'collection_time',
        'conversion_status': 'conversion_status',
        'devide_id': 'devide_id',
        'drive_letter': 'drive_letter',
        'encryption_method': 'encryption_method',
        'persistent_volume_id': 'persistent_volume_id',
        'protection_status': 'protection_status',
        'system_id': 'system_id'
    }

    def __init__(self, collection_time=None, conversion_status=None, devide_id=None, drive_letter=None, encryption_method=None, persistent_volume_id=None, protection_status=None, system_id=None):  # noqa: E501
        """SystemInsightsBitlockerInfo - a model defined in Swagger"""  # noqa: E501

        self._collection_time = None
        self._conversion_status = None
        self._devide_id = None
        self._drive_letter = None
        self._encryption_method = None
        self._persistent_volume_id = None
        self._protection_status = None
        self._system_id = None
        self.discriminator = None

        if collection_time is not None:
            self.collection_time = collection_time
        if conversion_status is not None:
            self.conversion_status = conversion_status
        if devide_id is not None:
            self.devide_id = devide_id
        if drive_letter is not None:
            self.drive_letter = drive_letter
        if encryption_method is not None:
            self.encryption_method = encryption_method
        if persistent_volume_id is not None:
            self.persistent_volume_id = persistent_volume_id
        if protection_status is not None:
            self.protection_status = protection_status
        if system_id is not None:
            self.system_id = system_id

    @property
    def collection_time(self):
        """Gets the collection_time of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The collection_time of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """Sets the collection_time of this SystemInsightsBitlockerInfo.


        :param collection_time: The collection_time of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: str
        """

        self._collection_time = collection_time

    @property
    def conversion_status(self):
        """Gets the conversion_status of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The conversion_status of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: int
        """
        return self._conversion_status

    @conversion_status.setter
    def conversion_status(self, conversion_status):
        """Sets the conversion_status of this SystemInsightsBitlockerInfo.


        :param conversion_status: The conversion_status of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: int
        """

        self._conversion_status = conversion_status

    @property
    def devide_id(self):
        """Gets the devide_id of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The devide_id of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: str
        """
        return self._devide_id

    @devide_id.setter
    def devide_id(self, devide_id):
        """Sets the devide_id of this SystemInsightsBitlockerInfo.


        :param devide_id: The devide_id of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: str
        """

        self._devide_id = devide_id

    @property
    def drive_letter(self):
        """Gets the drive_letter of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The drive_letter of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: str
        """
        return self._drive_letter

    @drive_letter.setter
    def drive_letter(self, drive_letter):
        """Sets the drive_letter of this SystemInsightsBitlockerInfo.


        :param drive_letter: The drive_letter of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: str
        """

        self._drive_letter = drive_letter

    @property
    def encryption_method(self):
        """Gets the encryption_method of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The encryption_method of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: str
        """
        return self._encryption_method

    @encryption_method.setter
    def encryption_method(self, encryption_method):
        """Sets the encryption_method of this SystemInsightsBitlockerInfo.


        :param encryption_method: The encryption_method of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: str
        """

        self._encryption_method = encryption_method

    @property
    def persistent_volume_id(self):
        """Gets the persistent_volume_id of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The persistent_volume_id of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: str
        """
        return self._persistent_volume_id

    @persistent_volume_id.setter
    def persistent_volume_id(self, persistent_volume_id):
        """Sets the persistent_volume_id of this SystemInsightsBitlockerInfo.


        :param persistent_volume_id: The persistent_volume_id of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: str
        """

        self._persistent_volume_id = persistent_volume_id

    @property
    def protection_status(self):
        """Gets the protection_status of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The protection_status of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: int
        """
        return self._protection_status

    @protection_status.setter
    def protection_status(self, protection_status):
        """Sets the protection_status of this SystemInsightsBitlockerInfo.


        :param protection_status: The protection_status of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: int
        """

        self._protection_status = protection_status

    @property
    def system_id(self):
        """Gets the system_id of this SystemInsightsBitlockerInfo.  # noqa: E501


        :return: The system_id of this SystemInsightsBitlockerInfo.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SystemInsightsBitlockerInfo.


        :param system_id: The system_id of this SystemInsightsBitlockerInfo.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInsightsBitlockerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInsightsBitlockerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
