# coding: utf-8

"""
    JumpCloud Directory API

    Allow cusotmers to manage the JumpCloud Directory objects, groupings and mappings.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Policy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, policy_template_id=None, organization_id=None, active=None, name=None, description=None, os=None, system_count=None, config=None):
        """
        Policy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'policy_template_id': 'str',
            'organization_id': 'str',
            'active': 'bool',
            'name': 'str',
            'description': 'str',
            'os': 'str',
            'system_count': 'int',
            'config': 'object'
        }

        self.attribute_map = {
            'id': 'id',
            'policy_template_id': 'policyTemplateID',
            'organization_id': 'organizationID',
            'active': 'active',
            'name': 'name',
            'description': 'description',
            'os': 'os',
            'system_count': 'systemCount',
            'config': 'config'
        }

        self._id = id
        self._policy_template_id = policy_template_id
        self._organization_id = organization_id
        self._active = active
        self._name = name
        self._description = description
        self._os = os
        self._system_count = system_count
        self._config = config

    @property
    def id(self):
        """
        Gets the id of this Policy.
        ObjectId uniquely indetifying a Policy.

        :return: The id of this Policy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Policy.
        ObjectId uniquely indetifying a Policy.

        :param id: The id of this Policy.
        :type: str
        """

        self._id = id

    @property
    def policy_template_id(self):
        """
        Gets the policy_template_id of this Policy.
        The Policy Template that this Policy was created from.

        :return: The policy_template_id of this Policy.
        :rtype: str
        """
        return self._policy_template_id

    @policy_template_id.setter
    def policy_template_id(self, policy_template_id):
        """
        Sets the policy_template_id of this Policy.
        The Policy Template that this Policy was created from.

        :param policy_template_id: The policy_template_id of this Policy.
        :type: str
        """

        self._policy_template_id = policy_template_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Policy.
        The organization that this Policy is for.

        :return: The organization_id of this Policy.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Policy.
        The organization that this Policy is for.

        :param organization_id: The organization_id of this Policy.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def active(self):
        """
        Gets the active of this Policy.
        Whether or not this Policy is currently active.

        :return: The active of this Policy.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Policy.
        Whether or not this Policy is currently active.

        :param active: The active of this Policy.
        :type: bool
        """

        self._active = active

    @property
    def name(self):
        """
        Gets the name of this Policy.
        The description for this specific Policy.

        :return: The name of this Policy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Policy.
        The description for this specific Policy.

        :param name: The name of this Policy.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Policy.
        The description for this specific Policy.

        :return: The description of this Policy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Policy.
        The description for this specific Policy.

        :param description: The description of this Policy.
        :type: str
        """

        self._description = description

    @property
    def os(self):
        """
        Gets the os of this Policy.
        The operating system that this policy belongs to.

        :return: The os of this Policy.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this Policy.
        The operating system that this policy belongs to.

        :param os: The os of this Policy.
        :type: str
        """

        self._os = os

    @property
    def system_count(self):
        """
        Gets the system_count of this Policy.
        For convenience. The number of systems that this policy is attached to.

        :return: The system_count of this Policy.
        :rtype: int
        """
        return self._system_count

    @system_count.setter
    def system_count(self, system_count):
        """
        Sets the system_count of this Policy.
        For convenience. The number of systems that this policy is attached to.

        :param system_count: The system_count of this Policy.
        :type: int
        """

        self._system_count = system_count

    @property
    def config(self):
        """
        Gets the config of this Policy.
        The specific configuration for this Policy.

        :return: The config of this Policy.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Policy.
        The specific configuration for this Policy.

        :param config: The config of this Policy.
        :type: object
        """

        self._config = config

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
